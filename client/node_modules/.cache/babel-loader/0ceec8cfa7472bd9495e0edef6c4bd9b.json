{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  DELETE_MARKED_LIST: \"DELETE_MARKED_LIST\",\n  ADD_SONG_UPDATE_LIST: \"ADD_SONG_UPDATE_LIST\",\n  ANNOTATE_SONG_FOR_DELETION: \"ANNOTATE_SONG_FOR_DELETION\",\n  EDIT_SONG_MARK: \"EDIT_SONG_MARK\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listMarkedForDeletion: null,\n    songMarkedForDeletion: null,\n    indexSongDelete: 0,\n    newSong: {\n      title: \"\",\n      artist: \"\",\n      youTubeId: \"\"\n    }\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            indexSongDelete: 0,\n            newSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            songMarkedForDeletion: null,\n            indexSongDelete: 0,\n            newSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            indexSongDelete: 0,\n            newSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            indexSongDelete: 0,\n            newSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: payload,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            indexSongDelete: 0,\n            newSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            indexSongDelete: 0,\n            newSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: false,\n            editListNameActive: true,\n            songMarkedForDeletion: null,\n            indexSongDelete: 0,\n            newSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n      case GlobalStoreActionType.DELETE_MARKED_LIST:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            indexSongDelete: 0,\n            newSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n      case GlobalStoreActionType.ADD_NEW_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            indexSongDelete: 0,\n            newSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n      case GlobalStoreActionType.MARK_SONG_FOR_EDIT:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            songIndexMarkedForEdit: payload,\n            editListNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            indexSongDelete: 0,\n            newSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            indexSongDelete: 0,\n            newSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n      case GlobalStoreActionType.ADD_SONG_UPDATE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            indexSongDelete: 0,\n            newSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n      case GlobalStoreActionType.ANNOTATE_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listKeyPairMarkedForDeletion: null,\n            indexSongDelete: payload.index,\n            newSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n      case GlobalStoreActionType.EDIT_SONG_MARK:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listKeyPairMarkedForDeletion: null,\n            indexSongDelete: store.indexSongDelete,\n            tempSong: payload\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.markListForDeletion = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    console.log(\"list marked for deletion\" + id);\n    store.openDeleteListModal();\n  };\n  store.deleteList = function (id) {\n    async function deleteList(id) {\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        const newIdNamePairs = store.idNamePairs.filter(idNamePair => idNamePair !== id);\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_MARKED_LIST,\n          payload: newIdNamePairs\n        });\n      }\n    }\n    deleteList(id);\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n    store.closeDeleteListModal();\n  };\n  store.openDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.closeDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.createNewList = function () {\n    async function asyncCreatePlaylist() {\n      let response = await api.createNewList();\n      if (response.data.success) {\n        let playlistId = response.data.playlist._id;\n        async function asyncSetCurrentList(id) {\n          let response = await api.getPlaylistById(id);\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist\n              });\n              store.history.push(\"/playlist/\" + playlist._id);\n            }\n          }\n        }\n        asyncSetCurrentList(playlistId);\n      }\n    }\n    asyncCreatePlaylist();\n  };\n  /*\n       store.deleteSong = (idx) => {\n         const list = store.currentList;\n         list.songs.splice(idx, 1);\n         async function asyncUpdatePlaylist(playlist) {\n           let response = await api.updatePlaylistById(playlist._id, playlist);\n           if (response.data.success) {\n             console.log(response.data.playlist);\n             storeReducer({\n               type: GlobalStoreActionType.SET_CURRENT_LIST,\n               payload: response.data.playlist,\n             });\n           }\n         }\n  \n         asyncUpdatePlaylist(list);\n       };\n  /*\n       store.addSong = function () {\n         async function asyncAddNewSong() {\n           let newName = \"Untitled\";\n           let newArtist = \"Undefined\";\n           let newId = \"dQw4w9WgXcQ\";\n           let id = store.currentList._id;\n  \n           let newSong = {title: newName,\n           artist: newArtist,\n           youTubeId: newId,\n           };\n  \n           let response = await api.getPlaylistById(id);\n           if (response.data.success) {\n             let playlist = response.data.playlist;\n             let l = playlist.songs.length;\n             playlist.songs[l] = newSong;\n             async function updateList(playlist) {\n               response = await api.updatePlaylistById(id, playlist);\n               if (response.data.success) {\n                 storeReducer({\n                   type: GlobalStoreActionType.ADD_NEW_SONG,\n                   payload: {\n                     playlist: playlist,\n                   },\n                 });\n               }\n             }\n             updateList(playlist);\n           }\n         }\n         asyncAddNewSong();\n       };*/\n\n  //FUNCTION TO ADD SONG\n  store.addSong = () => {\n    let cl = store.currentList;\n    let addSong = {\n      title: \"untitled\",\n      artist: \"unknown\",\n      youTubeId: \"dQw4w9WgXcQ\"\n    };\n    cl.songs.push(addSong);\n    store.update_current_list(cl);\n  };\n\n  //This function is to update current list\n  store.update_current_list = async list => {\n    const r = await api.updatePlaylistById(list._id, list);\n    if (r.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.ADD_SONG_UPDATE_LIST,\n        payload: list\n      });\n    }\n  };\n\n  //FUNCTION FOR DRAG AND DROP SONG\n  store.dragAndDropSong = (first, last) => {\n    let playlist = store.currentList;\n    if (first > last) {\n      let arr = playlist.songs[first];\n      for (let i = first; i > last; i--) {\n        playlist.songs[i] = playlist.songs[i - 1];\n      }\n      playlist.songs[last] = arr;\n    } else if (first < last) {\n      let arr = playlist.songs[first];\n      for (let i = first; i < last; i++) {\n        playlist.songs[i] = playlist.songs[i + 1];\n      }\n      playlist.songs[last] = arr;\n    }\n    store.update_current_list(playlist);\n  };\n\n  //Functions for DELETE SONG\n\n  store.annotateSongDelete = i => {\n    storeReducer({\n      type: GlobalStoreActionType.ANNOTATE_SONG_FOR_DELETION,\n      payload: {\n        i: i\n      }\n    });\n  };\n  store.deleteSong = i => {\n    let x = store.currentList;\n    if (x != null) {\n      x.songs.splice(i, 1);\n    }\n    store.update_current_list(x);\n    store.hideDeleteSongModal();\n  };\n  store.showDeleteSongModal = () => {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteSongModal = () => {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.editSong = (key, song) => {\n    let list = store.currentList;\n    if (list != null) {\n      let songToBeEdit = list.songs[key];\n      if (song.title === \"\") {\n        songToBeEdit.title = \"untitled\";\n      } else {\n        songToBeEdit.title = song.title;\n      }\n      if (song.artist === \"\") {\n        songToBeEdit.artist = \"unknown\";\n      } else {\n        songToBeEdit.artist = song.artist;\n      }\n      if (song.youTubeId === \"\") {\n        songToBeEdit.youTubeId = \"dQw4w9WgXcQ\";\n      } else {\n        songToBeEdit.youTubeId = song.youTubeId;\n      }\n    }\n    store.update_current_list(list);\n    store.hideEditSongModal();\n  };\n  store.markSongForEdit = (index, song) => {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_CHANGE,\n      payload: {\n        index: index,\n        song: song\n      }\n    });\n    store.showEditSongModal();\n  };\n  store.showEditSongModal = () => {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideEditSongModal = () => {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.handleSongChange = e => {\n    const tempSong = {\n      ...store.tempSong\n    };\n    tempSong[e.currentTarget.name] = e.currentTarget.value;\n    // this.setState({tempSong});\n    storeReducer({\n      type: GlobalStoreActionType.SONG_CHANGE,\n      payload: tempSong\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"wBYCCtrPbzXuQjJNeGAEi0NoAgc=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","DELETE_MARKED_LIST","ADD_SONG_UPDATE_LIST","ANNOTATE_SONG_FOR_DELETION","EDIT_SONG_MARK","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listMarkedForDeletion","songMarkedForDeletion","indexSongDelete","newSong","title","artist","youTubeId","storeReducer","action","type","payload","playlist","songIndexMarkedForEdit","editListNameActive","ADD_NEW_SONG","MARK_SONG_FOR_EDIT","listKeyPairMarkedForDeletion","index","tempSong","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","setlistNameActive","markListForDeletion","openDeleteListModal","deleteList","deletePlaylistById","newIdNamePairs","filter","idNamePair","deleteMarkedList","closeDeleteListModal","modal","document","getElementById","classList","add","remove","createNewList","asyncCreatePlaylist","playlistId","addSong","cl","update_current_list","list","r","dragAndDropSong","first","last","arr","i","annotateSongDelete","deleteSong","x","splice","hideDeleteSongModal","showDeleteSongModal","editSong","key","song","songToBeEdit","hideEditSongModal","markSongForEdit","MARK_SONG_FOR_CHANGE","showEditSongModal","handleSongChange","e","currentTarget","value","SONG_CHANGE"],"sources":["/Users/raiyan0islam/CSE316HW3Mongo/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  DELETE_MARKED_LIST: \"DELETE_MARKED_LIST\",\n  ADD_SONG_UPDATE_LIST: \"ADD_SONG_UPDATE_LIST\",\n  ANNOTATE_SONG_FOR_DELETION: \"ANNOTATE_SONG_FOR_DELETION\",\n  EDIT_SONG_MARK: \"EDIT_SONG_MARK\",\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n      idNamePairs: [],\n      currentList: null,\n      newListCounter: 0,\n      listNameActive: false,\n      listMarkedForDeletion: null,\n      songMarkedForDeletion: null,\n      indexSongDelete: 0,\n      newSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n          // LIST UPDATE OF ITS NAME\n          case GlobalStoreActionType.CHANGE_LIST_NAME: {\n            return setStore({\n              idNamePairs: payload.idNamePairs,\n              currentList: payload.playlist,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              indexSongDelete: 0,\n              newSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n          // STOP EDITING THE CURRENT LIST\n          case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: null,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              songMarkedForDeletion: null,\n              indexSongDelete: 0,\n              newSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n          // CREATE A NEW LIST\n          case GlobalStoreActionType.CREATE_NEW_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload,\n              newListCounter: store.newListCounter + 1,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              indexSongDelete: 0,\n              newSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n          // GET ALL THE LISTS SO WE CAN PRESENT THEM\n          case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n            return setStore({\n              idNamePairs: payload,\n              currentList: null,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              indexSongDelete: 0,\n              newSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n          // PREPARE TO DELETE A LIST\n          case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: null,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: payload,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              indexSongDelete: 0,\n              newSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n          // UPDATE A LIST\n          case GlobalStoreActionType.SET_CURRENT_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              indexSongDelete: 0,\n              newSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n          // START EDITING A LIST NAME\n          case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload,\n              newListCounter: store.newListCounter,\n              listNameActive: true,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: false,\n              editListNameActive: true,\n              songMarkedForDeletion: null,\n              indexSongDelete: 0,\n              newSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n\n          case GlobalStoreActionType.DELETE_MARKED_LIST: {\n            return setStore({\n              idNamePairs: payload,\n              currentList: null,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: null,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              indexSongDelete: 0,\n              newSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n\n          case GlobalStoreActionType.ADD_NEW_SONG: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload.playlist,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: null,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              indexSongDelete: 0,\n              newSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n\n          case GlobalStoreActionType.MARK_SONG_FOR_EDIT: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: store.currentList,\n              newListCounter: store.newListCounter,\n              songIndexMarkedForEdit: payload,\n              editListNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              indexSongDelete: 0,\n              newSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n          case GlobalStoreActionType.SET_CURRENT_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload,\n              newListCounter: store.newListCounter,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              indexSongDelete: 0,\n              newSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n\n          case GlobalStoreActionType.ADD_SONG_UPDATE_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: null,\n              indexSongDelete: 0,\n              newSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n\n          case GlobalStoreActionType.ANNOTATE_SONG_FOR_DELETION: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: store.currentList,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listKeyPairMarkedForDeletion: null,\n              indexSongDelete: payload.index,\n              newSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n\n          case GlobalStoreActionType.EDIT_SONG_MARK: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: store.currentList,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listKeyPairMarkedForDeletion: null,\n              indexSongDelete: store.indexSongDelete,\n              tempSong: payload,\n            });\n          }\n\n          default:\n            return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    store.markListForDeletion = function (id) {\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: id,\n      });\n      console.log(\"list marked for deletion\" + id);\n      store.openDeleteListModal();\n    };\n\n    store.deleteList = function (id) {\n      async function deleteList(id) {\n        let response = await api.deletePlaylistById(id);\n        if (response.data.success) {\n          store.loadIdNamePairs();\n          const newIdNamePairs = store.idNamePairs.filter(\n            (idNamePair) => idNamePair !== id\n          );\n          storeReducer({\n            type: GlobalStoreActionType.DELETE_MARKED_LIST,\n            payload: newIdNamePairs,\n          });\n        }\n      }\n      deleteList(id);\n    };\n\n    store.deleteMarkedList = function () {\n      store.deleteList(store.listMarkedForDeletion);\n      store.closeDeleteListModal();\n    };\n\n    store.openDeleteListModal = function () {\n      let modal = document.getElementById(\"delete-list-modal\");\n      modal.classList.add(\"is-visible\");\n    };\n\n    store.closeDeleteListModal = function () {\n      let modal = document.getElementById(\"delete-list-modal\");\n      modal.classList.remove(\"is-visible\");\n    };\n\n\n    store.createNewList = function (){\n        async function asyncCreatePlaylist() {\n          let response = await api.createNewList();\n          if (response.data.success) {\n            let playlistId = response.data.playlist._id; \n            async function asyncSetCurrentList(id) {\n              let response = await api.getPlaylistById(id);\n              if (response.data.success) {\n                let playlist = response.data.playlist;\n                if (response.data.success) {\n                  storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: playlist,\n                  });\n                  store.history.push(\"/playlist/\" + playlist._id); \n                }\n              }\n            }\n            asyncSetCurrentList(playlistId);\n          } \n        }\n        asyncCreatePlaylist();\n    };\n/*\n     store.deleteSong = (idx) => {\n       const list = store.currentList;\n       list.songs.splice(idx, 1);\n       async function asyncUpdatePlaylist(playlist) {\n         let response = await api.updatePlaylistById(playlist._id, playlist);\n         if (response.data.success) {\n           console.log(response.data.playlist);\n           storeReducer({\n             type: GlobalStoreActionType.SET_CURRENT_LIST,\n             payload: response.data.playlist,\n           });\n         }\n       }\n\n       asyncUpdatePlaylist(list);\n     };\n/*\n     store.addSong = function () {\n       async function asyncAddNewSong() {\n         let newName = \"Untitled\";\n         let newArtist = \"Undefined\";\n         let newId = \"dQw4w9WgXcQ\";\n         let id = store.currentList._id;\n\n         let newSong = {title: newName,\n         artist: newArtist,\n         youTubeId: newId,\n         };\n\n         let response = await api.getPlaylistById(id);\n         if (response.data.success) {\n           let playlist = response.data.playlist;\n           let l = playlist.songs.length;\n           playlist.songs[l] = newSong;\n           async function updateList(playlist) {\n             response = await api.updatePlaylistById(id, playlist);\n             if (response.data.success) {\n               storeReducer({\n                 type: GlobalStoreActionType.ADD_NEW_SONG,\n                 payload: {\n                   playlist: playlist,\n                 },\n               });\n             }\n           }\n           updateList(playlist);\n         }\n       }\n       asyncAddNewSong();\n     };*/\n\n\n    //FUNCTION TO ADD SONG\n     store.addSong = () => {\n       let cl = store.currentList;\n       let addSong = {\n         title: \"untitled\",\n         artist: \"unknown\",\n         youTubeId: \"dQw4w9WgXcQ\",\n       };\n       cl.songs.push(addSong);\n       store.update_current_list(cl);\n     };\n\n\n     //This function is to update current list\n      store.update_current_list = async (list) => {\n         const r = await api.updatePlaylistById(list._id, list);\n         if (r.data.success) {\n             storeReducer({\n               type: GlobalStoreActionType.ADD_SONG_UPDATE_LIST,\n               payload: list,\n             });\n         }        \n     }\n\n    //FUNCTION FOR DRAG AND DROP SONG\n     store.dragAndDropSong = (first, last) => {\n       let playlist = store.currentList;\n\n        if (first > last) {\n          let arr = playlist.songs[first];\n          for (let i = first; i > last; i--) {\n            playlist.songs[i] = playlist.songs[i - 1];\n          }\n          playlist.songs[last] = arr;\n        }\n\n        else if (first < last) {\n         let arr = playlist.songs[first];\n         for (let i = first; i < last; i++) {\n           playlist.songs[i] = playlist.songs[i + 1];\n         }\n         playlist.songs[last] = arr;\n       } \n       \n       store.update_current_list(playlist);\n     };\n\n\n\n    //Functions for DELETE SONG\n\n    store.annotateSongDelete = (i) => {\n       storeReducer({\n         type: GlobalStoreActionType.ANNOTATE_SONG_FOR_DELETION,\n         payload: {i : i},\n       });\n     };\n\n     store.deleteSong = (i) => {\n       let x = store.currentList;\n       if (x != null) {\n           x.songs.splice(i, 1);\n       }\n       store.update_current_list(x);\n       store.hideDeleteSongModal();\n     };\n\n     store.showDeleteSongModal = () => {\n       let modal = document.getElementById(\"delete-song-modal\");\n       modal.classList.add(\"is-visible\");\n     };\n\n     store.hideDeleteSongModal = () => {\n       let modal = document.getElementById(\"delete-song-modal\");\n       modal.classList.remove(\"is-visible\");\n     };\n\n\n     store.editSong = (key, song) => {\n       let list = store.currentList;\n\n       if (list != null) {\n         let songToBeEdit = list.songs[key];\n\n         if (song.title === \"\") {\n           songToBeEdit.title = \"untitled\";\n         } else {\n           songToBeEdit.title = song.title;\n         }\n         if (song.artist === \"\") {\n           songToBeEdit.artist = \"unknown\";\n         } else {\n           songToBeEdit.artist = song.artist;\n         }\n         if (song.youTubeId === \"\") {\n           songToBeEdit.youTubeId = \"dQw4w9WgXcQ\";\n         } else {\n           songToBeEdit.youTubeId = song.youTubeId;\n         }\n       }\n\n       store.update_current_list(list);\n       store.hideEditSongModal();\n     };\n\n     store.markSongForEdit = (index, song) => {\n       storeReducer({\n         type: GlobalStoreActionType.MARK_SONG_FOR_CHANGE,\n         payload: {\n           index: index,\n           song: song,\n         },\n       });\n       store.showEditSongModal();\n     };\n\n     store.showEditSongModal = () => {\n       let modal = document.getElementById(\"edit-song-modal\");\n       modal.classList.add(\"is-visible\");\n     };\n\n     store.hideEditSongModal = () => {\n       let modal = document.getElementById(\"edit-song-modal\");\n       modal.classList.remove(\"is-visible\");\n     };\n\n     store.handleSongChange = (e) => {\n       const tempSong = { ...store.tempSong };\n       tempSong[e.currentTarget.name] = e.currentTarget.value;\n       // this.setState({tempSong});\n       storeReducer({\n         type: GlobalStoreActionType.SONG_CHANGE,\n         payload: tempSong,\n       });\n     };\n\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}