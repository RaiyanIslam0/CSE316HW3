{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  DELETE_LIST: \"DELETE_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UPDATE_CURRENT_LIST: \"UPDATE_CURRENT_LIST\",\n  MARK_SONG_FOR_CHANGE: \"MARK_SONG_FOR_CHANGE\",\n  SONG_CHANGE: \"SONG_CHANGE\",\n  LIST_MODAL_OPEN: \"LIST_MODAL_OPEN\",\n  // for fooproof design\n  LIST_MODAL_CLOSE: \"LIST_MODAL_CLOSE\",\n  REMOVE_SONG_MODAL_OPEN: \"REMOVE_SONG_MODAL_OPEN\",\n  REMOVE_SONG_MODAL_CLOSE: \"REMOVE_SONG_MODAL_CLOSE\",\n  EDIT_SONG_MODAL_OPEN: \"EDIT_SONG_MODAL_OPEN\",\n  EDIT_SONG_MODAL_CLOSE: \"EDIT_SONG_MODAL_CLOSE\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\nconst removedSongs = []; // for redo remove song\n\nlet modal_open_status = false; // for foolproof design\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameEditActive: false,\n    listKeyPairMarkedForDeletion: null,\n    songKeyMarked: 0,\n    tempSong: {\n      title: \"\",\n      artist: \"\",\n      youTubeId: \"\"\n    },\n    isListModalOpen: false,\n    isRemoveSongModalOpen: false,\n    isEditSongModalOpen: false\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    console.log(type);\n    console.log(payload);\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameEditActive: false,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: 0,\n            tempSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter - 1,\n            listNameEditActive: false,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: 0,\n            tempSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter + 1,\n            listNameEditActive: false,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: 0,\n            tempSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n\n      // DELETE A PLAYLIST ->\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameEditActive: false,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: 0,\n            tempSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameEditActive: false,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: 0,\n            tempSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameEditActive: false,\n            listKeyPairMarkedForDeletion: payload,\n            songKeyMarked: 0,\n            tempSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameEditActive: false,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: 0,\n            tempSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameEditActive: true,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: 0,\n            tempSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n\n      // ADD A NEW SONG TO THE PLAYLIST ->\n      case GlobalStoreActionType.UPDATE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameEditActive: false,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: 0,\n            tempSong: {\n              title: \"\",\n              artist: \"\",\n              youTubeId: \"\"\n            }\n          });\n        }\n      case GlobalStoreActionType.MARK_SONG_FOR_CHANGE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameEditActive: false,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: payload.index,\n            tempSong: payload.song\n          });\n        }\n      case GlobalStoreActionType.SONG_CHANGE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameEditActive: false,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: store.songKeyMarked,\n            tempSong: payload,\n            isEditSongModalOpen: true\n          });\n        }\n      case GlobalStoreActionType.LIST_MODAL_OPEN:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameEditActive: store.listNameEditActive,\n            listKeyPairMarkedForDeletion: payload,\n            songKeyMarked: store.songKeyMarked,\n            tempSong: store.tempSong,\n            isListModalOpen: true\n          });\n        }\n      case GlobalStoreActionType.LIST_MODAL_CLOSE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameEditActive: store.listNameEditActive,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: store.songKeyMarked,\n            tempSong: store.tempSong,\n            isListModalOpen: false\n          });\n        }\n      case GlobalStoreActionType.REMOVE_SONG_MODAL_OPEN:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameEditActive: store.listNameEditActive,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: payload.index,\n            tempSong: payload.song,\n            isRemoveSongModalOpen: true\n          });\n        }\n      case GlobalStoreActionType.REMOVE_SONG_MODAL_CLOSE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameEditActive: store.listNameEditActive,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: store.songKeyMarked,\n            tempSong: store.tempSong,\n            isRemoveSongModalOpen: false\n          });\n        }\n      case GlobalStoreActionType.EDIT_SONG_MODAL_OPEN:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameEditActive: store.listNameEditActive,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: payload.index,\n            tempSong: payload.song,\n            isEditSongModalOpen: true\n          });\n        }\n      case GlobalStoreActionType.EDIT_SONG_MODAL_CLOSE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameEditActive: store.listNameEditActive,\n            listKeyPairMarkedForDeletion: null,\n            songKeyMarked: store.songKeyMarked,\n            tempSong: store.tempSong,\n            isEditSongModalOpen: false\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN\n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.markListForDeletion = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    console.log(\"list marked for deletion\" + id);\n    store.openDeleteListModal();\n  };\n  store.deleteList = function (id) {\n    async function deleteList(id) {\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        const newIdNamePairs = store.idNamePairs.filter(idNamePair => idNamePair !== id);\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_MARKED_LIST,\n          payload: newIdNamePairs\n        });\n      }\n    }\n    deleteList(id);\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n    store.closeDeleteListModal();\n  };\n  store.openDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.closeDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.createNewList = function () {\n    async function asyncCreatePlaylist() {\n      let response = await api.createNewList();\n      if (response.data.success) {\n        let playlistId = response.data.playlist._id;\n        async function asyncSetCurrentList(id) {\n          let response = await api.getPlaylistById(id);\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist\n              });\n              store.history.push(\"/playlist/\" + playlist._id);\n            }\n          }\n        }\n        asyncSetCurrentList(playlistId);\n      }\n    }\n    asyncCreatePlaylist();\n  };\n  store.deleteSong = idx => {\n    const list = store.currentList;\n    list.songs.splice(idx, 1);\n    async function asyncUpdatePlaylist(playlist) {\n      let response = await api.updatePlaylistById(playlist._id, playlist);\n      if (response.data.success) {\n        console.log(response.data.playlist);\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: response.data.playlist\n        });\n      }\n    }\n    asyncUpdatePlaylist(list);\n  };\n  /*\n     store.addSong = function () {\n       async function asyncAddNewSong() {\n         let newName = \"Untitled\";\n         let newArtist = \"Undefined\";\n         let newId = \"dQw4w9WgXcQ\";\n         let id = store.currentList._id;\n          let newSong = {title: newName,\n         artist: newArtist,\n         youTubeId: newId,\n         };\n          let response = await api.getPlaylistById(id);\n         if (response.data.success) {\n           let playlist = response.data.playlist;\n           let l = playlist.songs.length;\n           playlist.songs[l] = newSong;\n           async function updateList(playlist) {\n             response = await api.updatePlaylistById(id, playlist);\n             if (response.data.success) {\n               storeReducer({\n                 type: GlobalStoreActionType.ADD_NEW_SONG,\n                 payload: {\n                   playlist: playlist,\n                 },\n               });\n             }\n           }\n           updateList(playlist);\n         }\n       }\n       asyncAddNewSong();\n     };*/\n\n  store.addSong = () => {\n    let current_list = store.currentList;\n    let newSong = {\n      title: \"untitled\",\n      artist: \"unknown\",\n      youTubeId: \"dQw4w9WgXcQ\"\n    };\n    current_list.songs.push(newSong);\n    console.log(current_list);\n    store.update_current_list(current_list);\n  };\n  //This function is to update current list\n  store.update_current_list = async playlist => {\n    const response = await api.updatePlaylistById(playlist._id, playlist);\n    console.log(response);\n    if (response.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\n        payload: playlist\n      });\n    }\n  };\n  store.moveSong = (start, end) => {\n    let list = store.currentList;\n    if (start < end) {\n      let temp = list.songs[start];\n      for (let i = start; i < end; i++) {\n        list.songs[i] = list.songs[i + 1];\n      }\n      list.songs[end] = temp;\n    } else if (start > end) {\n      let temp = list.songs[start];\n      for (let i = start; i > end; i--) {\n        list.songs[i] = list.songs[i - 1];\n      }\n      list.songs[end] = temp;\n    }\n    store.update_current_list(list);\n  };\n  store.markSongForDeletion = function (songId) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n      payload: songId\n    });\n    store.showDeleteSongModal();\n  };\n  store.deleteMarkedSong = function () {\n    store.deleteSong(store.songMarkedForDeletion);\n    store.hideDeleteSongModal();\n  };\n  store.showDeleteSongModal = function () {\n    let modal = document.getElementById(\"remove-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"remove-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.deleteSong = function (songId) {\n    let playlist = store.currentList;\n    const name = playlist.name;\n    const id = playlist._id;\n    let newSongs = [];\n    for (let k = 0; k < songId; k++) {\n      newSongs.push(playlist.songs[k]);\n    }\n    for (let k = songId + 1; k < playlist.songs.length; k++) {\n      newSongs.push(playlist.songs[k]);\n    }\n    store.updateCurrentList(id, {\n      name,\n      songs: newSongs\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"BUFZCchuxIIkjxerP/SS3mh1JSw=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","DELETE_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","UPDATE_CURRENT_LIST","MARK_SONG_FOR_CHANGE","SONG_CHANGE","LIST_MODAL_OPEN","LIST_MODAL_CLOSE","REMOVE_SONG_MODAL_OPEN","REMOVE_SONG_MODAL_CLOSE","EDIT_SONG_MODAL_OPEN","EDIT_SONG_MODAL_CLOSE","tps","removedSongs","modal_open_status","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameEditActive","listKeyPairMarkedForDeletion","songKeyMarked","tempSong","title","artist","youTubeId","isListModalOpen","isRemoveSongModalOpen","isEditSongModalOpen","storeReducer","action","type","payload","console","log","index","song","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","playlist","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","setlistNameActive","markListForDeletion","openDeleteListModal","deleteList","deletePlaylistById","newIdNamePairs","filter","idNamePair","DELETE_MARKED_LIST","deleteMarkedList","listMarkedForDeletion","closeDeleteListModal","modal","document","getElementById","classList","add","remove","createNewList","asyncCreatePlaylist","playlistId","deleteSong","idx","list","splice","asyncUpdatePlaylist","addSong","current_list","newSong","update_current_list","moveSong","start","end","temp","i","markSongForDeletion","songId","MARK_SONG_FOR_DELETION","showDeleteSongModal","deleteMarkedSong","songMarkedForDeletion","hideDeleteSongModal","newSongs","k","updateCurrentList"],"sources":["/Users/raiyan0islam/CSE316HW3Mongo/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  DELETE_LIST: \"DELETE_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UPDATE_CURRENT_LIST: \"UPDATE_CURRENT_LIST\",\n  MARK_SONG_FOR_CHANGE: \"MARK_SONG_FOR_CHANGE\",\n  SONG_CHANGE: \"SONG_CHANGE\",\n  LIST_MODAL_OPEN: \"LIST_MODAL_OPEN\", // for fooproof design\n  LIST_MODAL_CLOSE: \"LIST_MODAL_CLOSE\",\n  REMOVE_SONG_MODAL_OPEN: \"REMOVE_SONG_MODAL_OPEN\",\n  REMOVE_SONG_MODAL_CLOSE: \"REMOVE_SONG_MODAL_CLOSE\",\n  EDIT_SONG_MODAL_OPEN: \"EDIT_SONG_MODAL_OPEN\",\n  EDIT_SONG_MODAL_CLOSE: \"EDIT_SONG_MODAL_CLOSE\",\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\nconst removedSongs = []; // for redo remove song\n\nlet modal_open_status = false; // for foolproof design\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameEditActive: false,\n    listKeyPairMarkedForDeletion: null,\n    songKeyMarked: 0,\n    tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n    isListModalOpen: false,\n    isRemoveSongModalOpen: false,\n    isEditSongModalOpen: false,\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = (action) => {\n    const { type, payload } = action;\n    console.log(type);\n    console.log(payload);\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME: {\n        return setStore({\n          idNamePairs: payload.idNamePairs,\n          currentList: null,\n          newListCounter: store.newListCounter,\n          listNameEditActive: false,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: 0,\n          tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n        });\n      }\n\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: null,\n          newListCounter: store.newListCounter - 1,\n          listNameEditActive: false,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: 0,\n          tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n        });\n      }\n\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST: {\n        return setStore({\n          idNamePairs: payload.idNamePairs,\n          currentList: null,\n          newListCounter: store.newListCounter + 1,\n          listNameEditActive: false,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: 0,\n          tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n        });\n      }\n\n      // DELETE A PLAYLIST ->\n      case GlobalStoreActionType.DELETE_LIST: {\n        return setStore({\n          idNamePairs: payload,\n          currentList: null,\n          newListCounter: store.newListCounter,\n          listNameEditActive: false,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: 0,\n          tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n        });\n      }\n\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n        return setStore({\n          idNamePairs: payload,\n          currentList: null,\n          newListCounter: store.newListCounter,\n          listNameEditActive: false,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: 0,\n          tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n        });\n      }\n\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: store.currentList,\n          newListCounter: store.newListCounter,\n          listNameEditActive: false,\n          listKeyPairMarkedForDeletion: payload,\n          songKeyMarked: 0,\n          tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n        });\n      }\n\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: payload,\n          newListCounter: store.newListCounter,\n          listNameEditActive: false,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: 0,\n          tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n        });\n      }\n\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: payload,\n          newListCounter: store.newListCounter,\n          listNameEditActive: true,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: 0,\n          tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n        });\n      }\n\n      // ADD A NEW SONG TO THE PLAYLIST ->\n      case GlobalStoreActionType.UPDATE_CURRENT_LIST: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: payload,\n          newListCounter: store.newListCounter,\n          listNameEditActive: false,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: 0,\n          tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n        });\n      }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_CHANGE: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: store.currentList,\n          newListCounter: store.newListCounter,\n          listNameEditActive: false,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: payload.index,\n          tempSong: payload.song,\n        });\n      }\n\n      case GlobalStoreActionType.SONG_CHANGE: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: store.currentList,\n          newListCounter: store.newListCounter,\n          listNameEditActive: false,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: store.songKeyMarked,\n          tempSong: payload,\n          isEditSongModalOpen: true,\n        });\n      }\n\n      case GlobalStoreActionType.LIST_MODAL_OPEN: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: store.currentList,\n          newListCounter: store.newListCounter,\n          listNameEditActive: store.listNameEditActive,\n          listKeyPairMarkedForDeletion: payload,\n          songKeyMarked: store.songKeyMarked,\n          tempSong: store.tempSong,\n          isListModalOpen: true,\n        });\n      }\n\n      case GlobalStoreActionType.LIST_MODAL_CLOSE: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: store.currentList,\n          newListCounter: store.newListCounter,\n          listNameEditActive: store.listNameEditActive,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: store.songKeyMarked,\n          tempSong: store.tempSong,\n          isListModalOpen: false,\n        });\n      }\n\n      case GlobalStoreActionType.REMOVE_SONG_MODAL_OPEN: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: store.currentList,\n          newListCounter: store.newListCounter,\n          listNameEditActive: store.listNameEditActive,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: payload.index,\n          tempSong: payload.song,\n          isRemoveSongModalOpen: true,\n        });\n      }\n\n      case GlobalStoreActionType.REMOVE_SONG_MODAL_CLOSE: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: store.currentList,\n          newListCounter: store.newListCounter,\n          listNameEditActive: store.listNameEditActive,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: store.songKeyMarked,\n          tempSong: store.tempSong,\n          isRemoveSongModalOpen: false,\n        });\n      }\n\n      case GlobalStoreActionType.EDIT_SONG_MODAL_OPEN: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: store.currentList,\n          newListCounter: store.newListCounter,\n          listNameEditActive: store.listNameEditActive,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: payload.index,\n          tempSong: payload.song,\n          isEditSongModalOpen: true,\n        });\n      }\n\n      case GlobalStoreActionType.EDIT_SONG_MODAL_CLOSE: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: store.currentList,\n          newListCounter: store.newListCounter,\n          listNameEditActive: store.listNameEditActive,\n          listKeyPairMarkedForDeletion: null,\n          songKeyMarked: store.songKeyMarked,\n          tempSong: store.tempSong,\n          isEditSongModalOpen: false,\n        });\n      }\n\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN\n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist,\n                  },\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {},\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray,\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist,\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null,\n    });\n  };\n\n  store.markListForDeletion = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id,\n    });\n    console.log(\"list marked for deletion\" + id);\n    store.openDeleteListModal();\n  };\n\n  store.deleteList = function (id) {\n    async function deleteList(id) {\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        const newIdNamePairs = store.idNamePairs.filter(\n          (idNamePair) => idNamePair !== id\n        );\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_MARKED_LIST,\n          payload: newIdNamePairs,\n        });\n      }\n    }\n    deleteList(id);\n  };\n\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n    store.closeDeleteListModal();\n  };\n\n  store.openDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.closeDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.createNewList = function () {\n    async function asyncCreatePlaylist() {\n      let response = await api.createNewList();\n      if (response.data.success) {\n        let playlistId = response.data.playlist._id;\n        async function asyncSetCurrentList(id) {\n          let response = await api.getPlaylistById(id);\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist,\n              });\n              store.history.push(\"/playlist/\" + playlist._id);\n            }\n          }\n        }\n        asyncSetCurrentList(playlistId);\n      }\n    }\n    asyncCreatePlaylist();\n  };\n\n  store.deleteSong = (idx) => {\n    const list = store.currentList;\n    list.songs.splice(idx, 1);\n    async function asyncUpdatePlaylist(playlist) {\n      let response = await api.updatePlaylistById(playlist._id, playlist);\n      if (response.data.success) {\n        console.log(response.data.playlist);\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: response.data.playlist,\n        });\n      }\n    }\n\n    asyncUpdatePlaylist(list);\n  };\n  /*\n     store.addSong = function () {\n       async function asyncAddNewSong() {\n         let newName = \"Untitled\";\n         let newArtist = \"Undefined\";\n         let newId = \"dQw4w9WgXcQ\";\n         let id = store.currentList._id;\n\n         let newSong = {title: newName,\n         artist: newArtist,\n         youTubeId: newId,\n         };\n\n         let response = await api.getPlaylistById(id);\n         if (response.data.success) {\n           let playlist = response.data.playlist;\n           let l = playlist.songs.length;\n           playlist.songs[l] = newSong;\n           async function updateList(playlist) {\n             response = await api.updatePlaylistById(id, playlist);\n             if (response.data.success) {\n               storeReducer({\n                 type: GlobalStoreActionType.ADD_NEW_SONG,\n                 payload: {\n                   playlist: playlist,\n                 },\n               });\n             }\n           }\n           updateList(playlist);\n         }\n       }\n       asyncAddNewSong();\n     };*/\n\n  store.addSong = () => {\n    let current_list = store.currentList;\n    let newSong = {\n      title: \"untitled\",\n      artist: \"unknown\",\n      youTubeId: \"dQw4w9WgXcQ\",\n    };\n    current_list.songs.push(newSong);\n    console.log(current_list);\n\n    store.update_current_list(current_list);\n  };\n  //This function is to update current list\n  store.update_current_list = async (playlist) => {\n    const response = await api.updatePlaylistById(playlist._id, playlist);\n    console.log(response);\n    if (response.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\n        payload: playlist,\n      });\n    }\n  };\n\n  store.moveSong = (start, end) => {\n    let list = store.currentList;\n\n    if (start < end) {\n      let temp = list.songs[start];\n      for (let i = start; i < end; i++) {\n        list.songs[i] = list.songs[i + 1];\n      }\n      list.songs[end] = temp;\n    } else if (start > end) {\n      let temp = list.songs[start];\n      for (let i = start; i > end; i--) {\n        list.songs[i] = list.songs[i - 1];\n      }\n      list.songs[end] = temp;\n    }\n\n    store.update_current_list(list);\n  };\n\n  store.markSongForDeletion = function (songId) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n      payload: songId,\n    });\n    store.showDeleteSongModal();\n  };\n  store.deleteMarkedSong = function () {\n    store.deleteSong(store.songMarkedForDeletion);\n    store.hideDeleteSongModal();\n  };\n  store.showDeleteSongModal = function () {\n    let modal = document.getElementById(\"remove-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"remove-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.deleteSong = function (songId) {\n    let playlist = store.currentList;\n    const name = playlist.name;\n    const id = playlist._id;\n    let newSongs = [];\n    for (let k = 0; k < songId; k++) {\n      newSongs.push(playlist.songs[k]);\n    }\n    for (let k = songId + 1; k < playlist.songs.length; k++) {\n      newSongs.push(playlist.songs[k]);\n    }\n    store.updateCurrentList(id, {\n      name,\n      songs: newSongs,\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return { store, storeReducer };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}