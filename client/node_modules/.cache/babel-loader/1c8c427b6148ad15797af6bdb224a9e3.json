{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport AddSong_Transaction from \"../common/AddSong_Transaction\";\nimport MoveSong_Transaction from \"../common/MoveSong_Transaction\";\nimport DeleteSong_Transaction from \"../common/DeleteSong_Transaction\";\nimport EditSong_Transaction from \"../common/EditSong_Transaction\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  DELETE_MARKED_LIST: \"DELETE_MARKED_LIST\",\n  ADD_SONG_UPDATE_LIST: \"ADD_SONG_UPDATE_LIST\",\n  ANNOTATE_SONG_FOR_DELETION: \"ANNOTATE_SONG_FOR_DELETION\",\n  ANNOTATE_SONG_FOR_EDIT: \"ANNOTATE_SONG_FOR_EDIT\",\n  SONG_CHANGE: \"SONG_CHANGE\",\n  MARK_SONG_FOR_EDITION: \"MARK_SONG_FOR_EDITION\",\n  EDIT_SONG: \"EDIT_SONG\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listMarkedForDeletion: null,\n    songMarkedForDeletion: null,\n    indexSongDelete: 0,\n    //listKeyPairMarkedForDeletion: null,\n    //songMarkedForEdit: 0,\n    //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n\n    markEditSongIndex: 0,\n    markListEdit: null,\n    oldTitle: null,\n    oldArtist: null,\n    oldYouTubeId: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: null\n            //songMarkedForEdit: 0,\n            //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_EDITION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markEditSongIndex: payload.markEditSongIndex,\n            markListEdit: payload.markListEdit,\n            oldTitle: payload.oldTitle,\n            oldArtist: payload.oldArtist,\n            oldYouTubeId: payload.oldYouTubeId\n          });\n        }\n\n      // PREPARE TO Edit A LIST\n      case GlobalStoreActionType.EDIT_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markEditSongIndex: 0,\n            markListEdit: null\n          });\n        }\n\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            songMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: null\n            //songMarkedForEdit: 0,\n            //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.playlist,\n            //EDIT MADE HERE..................................\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: null\n            //songMarkedForEdit: 0,\n            //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: null\n            //songMarkedForEdit: 0,\n            //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: payload,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: payload\n            //songMarkedForEdit: 0,\n            //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: null\n            //songMarkedForEdit: 0,\n            //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: false,\n            editListNameActive: true,\n            songMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: null\n            //songMarkedForEdit: 0,\n            //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n          });\n        }\n\n      case GlobalStoreActionType.DELETE_MARKED_LIST:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            listKeyPairMarkedForDeletion: null\n            //songMarkedForEdit: 0,\n            //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n          });\n        }\n      /*\n      case GlobalStoreActionType.ADD_NEW_SONG: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: payload.playlist,\n          newListCounter: store.newListCounter,\n          listNameActive: false,\n          listMarkedForDeletion: null,\n          songIndexMarkedForEdit: null,\n          editListNameActive: false,\n          listKeyPairMarkedForDeletion: null,\n        });\n      }*/\n\n      case GlobalStoreActionType.MARK_SONG_FOR_EDIT:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            songIndexMarkedForEdit: payload,\n            editListNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            listKeyPairMarkedForDeletion: null\n            //songMarkedForEdit: 0,\n            //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n          });\n        }\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            listKeyPairMarkedForDeletion: null\n            //songMarkedForEdit: 0,\n            //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n          });\n        }\n\n      case GlobalStoreActionType.ADD_SONG_UPDATE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: null\n            //songMarkedForEdit: 0,\n            //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n          });\n        }\n\n      case GlobalStoreActionType.ANNOTATE_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listKeyPairMarkedForDeletion: null,\n            indexSongDelete: payload,\n            listKeyPairMarkedForDeletion: null\n            //songMarkedForEdit: 0,\n            //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n          });\n        }\n\n      case GlobalStoreActionType.ANNOTATE_SONG_FOR_EDIT:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listKeyPairMarkedForDeletion: null,\n            indexSongDelete: payload,\n            listKeyPairMarkedForDeletion: null\n            //songMarkedForEdit: payload.index,\n            //tempSong: payload.song,\n          });\n        }\n\n      case GlobalStoreActionType.SONG_CHANGE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listKeyPairMarkedForDeletion: null,\n            //songMarkedForEdit: store.songMarkedForEdit,\n            tempSong: payload\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.markListForDeletion = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    store.openDeleteListModal();\n  };\n  store.deleteList = function (id) {\n    async function deleteList(id) {\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        const newIdNamePairs = store.idNamePairs.filter(idNamePair => idNamePair !== id);\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_MARKED_LIST,\n          payload: newIdNamePairs\n        });\n      }\n    }\n    deleteList(id);\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n    store.closeDeleteListModal();\n  };\n  store.openDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.closeDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.createNewList = function () {\n    async function asyncCreatePlaylist() {\n      let response = await api.createNewList();\n      if (response.data.success) {\n        let playlistId = response.data.playlist._id;\n        async function asyncSetCurrentList(id) {\n          let response = await api.getPlaylistById(id);\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist\n              });\n              store.history.push(\"/playlist/\" + playlist._id);\n            }\n          }\n        }\n        asyncSetCurrentList(playlistId);\n      }\n    }\n    asyncCreatePlaylist();\n  };\n  /*\n       store.deleteSong = (index) => {\n         const list = store.currentList;\n         list.songs.splice(index, 1);\n         async function asyncUpdatePlaylist(playlist) {\n           let response = await api.updatePlaylistById(playlist._id, playlist);\n           if (response.data.success) {\n             console.log(response.data.playlist);\n             storeReducer({\n               type: GlobalStoreActionType.SET_CURRENT_LIST,\n               payload: response.data.playlist,\n             });\n           }\n         }\n  \n         asyncUpdatePlaylist(list);\n       };\n  /*\n       store.addSong = function () {\n         async function asyncAddNewSong() {\n           let newName = \"Untitled\";\n           let newArtist = \"Undefined\";\n           let newId = \"dQw4w9WgXcQ\";\n           let id = store.currentList._id;\n  \n           let newSong = {title: newName,\n           artist: newArtist,\n           youTubeId: newId,\n           };\n  \n           let response = await api.getPlaylistById(id);\n           if (response.data.success) {\n             let playlist = response.data.playlist;\n             let l = playlist.songs.length;\n             playlist.songs[l] = newSong;\n             async function updateList(playlist) {\n               response = await api.updatePlaylistById(id, playlist);\n               if (response.data.success) {\n                 storeReducer({\n                   type: GlobalStoreActionType.ADD_NEW_SONG,\n                   payload: {\n                     playlist: playlist,\n                   },\n                 });\n               }\n             }\n             updateList(playlist);\n           }\n         }\n         asyncAddNewSong();\n       };*/\n\n  //FUNCTION TO ADD SONG\n  store.addSong = () => {\n    let cl = store.currentList;\n    let addSong = {\n      title: \"untitled\",\n      artist: \"unknown\",\n      youTubeId: \"dQw4w9WgXcQ\"\n    };\n    cl.songs.push(addSong);\n    store.update_current_list(cl);\n  };\n\n  //This function is to update current list\n  store.update_current_list = async list => {\n    const r = await api.updatePlaylistById(list._id, list);\n    if (r.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.ADD_SONG_UPDATE_LIST,\n        payload: list\n      });\n    }\n  };\n\n  //FUNCTION FOR DRAG AND DROP SONG\n  store.dragAndDropSong = (first, last) => {\n    let playlist = store.currentList;\n    if (first > last) {\n      let arr = playlist.songs[first];\n      for (let i = first; i > last; i--) {\n        playlist.songs[i] = playlist.songs[i - 1];\n      }\n      playlist.songs[last] = arr;\n    } else if (first < last) {\n      let arr = playlist.songs[first];\n      for (let i = first; i < last; i++) {\n        playlist.songs[i] = playlist.songs[i + 1];\n      }\n      playlist.songs[last] = arr;\n    }\n    store.update_current_list(playlist);\n  };\n\n  //Functions for DELETE SONG\n\n  store.annotateSongDelete = i => {\n    storeReducer({\n      type: GlobalStoreActionType.ANNOTATE_SONG_FOR_DELETION,\n      payload: i\n    });\n  };\n  store.deleteSong = i => {\n    let x = store.currentList;\n    if (x != null) {\n      x.songs.splice(i, 1);\n    }\n    store.update_current_list(x);\n    store.hideDeleteSongModal();\n  };\n  store.showDeleteSongModal = () => {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteSongModal = () => {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  /*\n       store.annotateSongEdit = (index,song) => {\n         storeReducer({\n           type: GlobalStoreActionType.ANNOTATE_SONG_FOR_EDIT,\n           payload: {\n             index: index,\n             song: song,\n           },\n         });\n         store.showEditSongModal();\n       };\n  /*\n       store.editSong = (index,title,artist,youTubeId) => {\n           this.store.currentList.songs.splice(index, 1, {\n             title: title,\n             artist: artist,\n             youTubeId: youTubeId,\n           });\n  \n           this.store.update_current_list(this.store.currentList);\n           this.hideEditSongModal();\n  \n       }*/\n  /*\n       store.editSong = (key, song) => {\n         let list = store.currentList;\n  \n         if (list != null) {\n           let songToBeEdit = list.songs[key];\n  \n           if (song.title === \"\") {\n             songToBeEdit.title = \"untitled\";\n           } else {\n             songToBeEdit.title = song.title;\n           }\n           if (song.artist === \"\") {\n             songToBeEdit.artist = \"unknown\";\n           } else {\n             songToBeEdit.artist = song.artist;\n           }\n           if (song.youTubeId === \"\") {\n             songToBeEdit.youTubeId = \"dQw4w9WgXcQ\";\n           } else {\n             songToBeEdit.youTubeId = song.youTubeId;\n           }\n         }\n  \n         store.update_current_list(list);\n         store.hideEditSongModal();\n       };\n  \n  \n       store.handleSongChange = (e) => {\n         const tempSong = { ...store.tempSong };\n         tempSong[e.currentTarget.name] = e.currentTarget.value;\n         // this.setState({tempSong});\n         storeReducer({\n           type: GlobalStoreActionType.SONG_CHANGE,\n           payload: tempSong,\n         });\n       };\n  \n       store.showEditSongModal = () => {\n         let modal = document.getElementById(\"edit-song-modal\");\n         modal.classList.add(\"is-visible\");\n       };\n  \n       store.hideEditSongModal = () => {\n         let modal = document.getElementById(\"edit-song-modal\");\n         modal.classList.remove(\"is-visible\");\n       };\n       */\n\n  store.editSong = function (index, song) {\n    let t = song.title;\n    let a = song.artist;\n    let y = song.youTubeId;\n    store.showEditSongModal(t, a, y);\n    async function asyncSetCurrentSong() {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.MARK_SONG_FOR_EDITION,\n            payload: {\n              markEditSongIndex: index,\n              markListEdit: playlist,\n              oldTitle: t,\n              oldArtist: a,\n              oldYouTubeId: y\n            }\n          });\n        }\n      }\n    }\n    asyncSetCurrentSong();\n  };\n  store.edit = function (index) {\n    let newTitle = document.getElementById(\"tname\").value; //new value\n    let newArtist = document.getElementById(\"aname\").value; //new value\n    let newYouTubeId = document.getElementById(\"yname\").value; //new value\n    async function asyncEditSong(index) {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.songs[index].title = newTitle;\n        playlist.songs[index].artist = newArtist;\n        playlist.songs[index].youTubeId = newYouTubeId;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n            storeReducer({\n              type: GlobalStoreActionType.EDIT_SONG,\n              payload: {\n                playlist: playlist\n              }\n            });\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncEditSong(index);\n  };\n  store.showEditSongModal = function (t, a, y) {\n    let modal = document.getElementById(\"edit-song-modal\");\n    document.getElementById(\"tname\").value = t;\n    document.getElementById(\"aname\").value = a;\n    document.getElementById(\"yname\").value = y;\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideEditSongModal = function () {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.addAddSongTransaction = () => {\n    let transaction = new AddSong_Transaction(store);\n    tps.addTransaction(transaction);\n  };\n  store.addMoveSongTransaction = (start, end) => {\n    let transaction = new MoveSong_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n  store.addDeleteSongTransaction = (index, title, artist, id) => {\n    let transaction = new DeleteSong_Transaction(store, index, title, artist, id);\n    tps.addTransaction(transaction);\n  };\n\n  //store.addEditSongTransaction = (index) => {\n  //  let transaction = new EditSong_Transaction(store, index);\n  //   tps.addTransaction(transaction);\n  //};\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"+7/ma9Sf0/1H3+EC+XuwLvLbEMI=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","AddSong_Transaction","MoveSong_Transaction","DeleteSong_Transaction","EditSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","DELETE_MARKED_LIST","ADD_SONG_UPDATE_LIST","ANNOTATE_SONG_FOR_DELETION","ANNOTATE_SONG_FOR_EDIT","SONG_CHANGE","MARK_SONG_FOR_EDITION","EDIT_SONG","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listMarkedForDeletion","songMarkedForDeletion","indexSongDelete","markEditSongIndex","markListEdit","oldTitle","oldArtist","oldYouTubeId","storeReducer","action","type","payload","playlist","songIndexMarkedForEdit","editListNameActive","listKeyPairMarkedForDeletion","MARK_SONG_FOR_EDIT","tempSong","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","setlistNameActive","markListForDeletion","openDeleteListModal","deleteList","deletePlaylistById","newIdNamePairs","filter","idNamePair","deleteMarkedList","closeDeleteListModal","modal","document","getElementById","classList","add","remove","createNewList","asyncCreatePlaylist","playlistId","addSong","cl","title","artist","youTubeId","update_current_list","list","r","dragAndDropSong","first","last","arr","i","annotateSongDelete","deleteSong","x","splice","hideDeleteSongModal","showDeleteSongModal","editSong","index","song","t","a","y","showEditSongModal","asyncSetCurrentSong","edit","newTitle","value","newArtist","newYouTubeId","asyncEditSong","hideEditSongModal","addAddSongTransaction","transaction","addTransaction","addMoveSongTransaction","start","end","addDeleteSongTransaction"],"sources":["/Users/raiyan0islam/CSE316HW3Mongo/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport AddSong_Transaction from \"../common/AddSong_Transaction\";\nimport MoveSong_Transaction from \"../common/MoveSong_Transaction\";\nimport DeleteSong_Transaction from \"../common/DeleteSong_Transaction\";\nimport EditSong_Transaction from \"../common/EditSong_Transaction\";\nexport const GlobalStoreContext = createContext({});\n\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  DELETE_MARKED_LIST: \"DELETE_MARKED_LIST\",\n\n  ADD_SONG_UPDATE_LIST: \"ADD_SONG_UPDATE_LIST\",\n\n  ANNOTATE_SONG_FOR_DELETION: \"ANNOTATE_SONG_FOR_DELETION\",\n\n  ANNOTATE_SONG_FOR_EDIT: \"ANNOTATE_SONG_FOR_EDIT\",\n  SONG_CHANGE: \"SONG_CHANGE\",\n\n  MARK_SONG_FOR_EDITION: \"MARK_SONG_FOR_EDITION\",\n  EDIT_SONG: \"EDIT_SONG\",\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n      idNamePairs: [],\n      currentList: null,\n      newListCounter: 0,\n      listNameActive: false,\n\n      listMarkedForDeletion: null,\n      songMarkedForDeletion: null,\n      indexSongDelete: 0,\n      //listKeyPairMarkedForDeletion: null,\n      //songMarkedForEdit: 0,\n      //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n\n      markEditSongIndex: 0,\n      markListEdit: null,\n      oldTitle: null,\n      oldArtist: null,\n      oldYouTubeId: null,\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n          // LIST UPDATE OF ITS NAME\n          case GlobalStoreActionType.CHANGE_LIST_NAME: {\n            return setStore({\n              idNamePairs: payload.idNamePairs,\n              currentList: payload.playlist,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: null,\n              //songMarkedForEdit: 0,\n              //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n\n\n\n\n\n          case GlobalStoreActionType.MARK_SONG_FOR_EDITION: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: store.currentList,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n\n              markEditSongIndex: payload.markEditSongIndex,\n              markListEdit: payload.markListEdit,\n              oldTitle: payload.oldTitle,\n              oldArtist: payload.oldArtist,\n              oldYouTubeId: payload.oldYouTubeId,\n            });\n          }\n\n          // PREPARE TO Edit A LIST\n          case GlobalStoreActionType.EDIT_SONG: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload.playlist,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n\n              markEditSongIndex: 0,\n              markListEdit: null,\n            });\n          }\n\n\n\n\n\n\n\n\n          // STOP EDITING THE CURRENT LIST\n          case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: null,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              songMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: null,\n              //songMarkedForEdit: 0,\n              //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n          // CREATE A NEW LIST\n          case GlobalStoreActionType.CREATE_NEW_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload.playlist, //EDIT MADE HERE..................................\n              newListCounter: store.newListCounter + 1,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: null,\n              //songMarkedForEdit: 0,\n              //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n          // GET ALL THE LISTS SO WE CAN PRESENT THEM\n          case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n            return setStore({\n              idNamePairs: payload,\n              currentList: null,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: null,\n              //songMarkedForEdit: 0,\n              //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n          // PREPARE TO DELETE A LIST\n          case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: null,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: payload,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: payload,\n              //songMarkedForEdit: 0,\n              //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n          // UPDATE A LIST\n          case GlobalStoreActionType.SET_CURRENT_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: null,\n              //songMarkedForEdit: 0,\n              //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n          // START EDITING A LIST NAME\n          case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload,\n              newListCounter: store.newListCounter,\n              listNameActive: true,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: false,\n              editListNameActive: true,\n              songMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: null,\n              //songMarkedForEdit: 0,\n              //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n\n          case GlobalStoreActionType.DELETE_MARKED_LIST: {\n            return setStore({\n              idNamePairs: payload,\n              currentList: null,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: null,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              listKeyPairMarkedForDeletion: null,\n              //songMarkedForEdit: 0,\n              //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n          /*\n          case GlobalStoreActionType.ADD_NEW_SONG: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload.playlist,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: null,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              listKeyPairMarkedForDeletion: null,\n            });\n          }*/\n\n          case GlobalStoreActionType.MARK_SONG_FOR_EDIT: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: store.currentList,\n              newListCounter: store.newListCounter,\n              songIndexMarkedForEdit: payload,\n              editListNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              listKeyPairMarkedForDeletion: null,\n              //songMarkedForEdit: 0,\n              //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n          case GlobalStoreActionType.SET_CURRENT_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload,\n              newListCounter: store.newListCounter,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              listKeyPairMarkedForDeletion: null,\n              //songMarkedForEdit: 0,\n              //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n\n          case GlobalStoreActionType.ADD_SONG_UPDATE_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: null,\n              //songMarkedForEdit: 0,\n              //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n\n          case GlobalStoreActionType.ANNOTATE_SONG_FOR_DELETION: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: store.currentList,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listKeyPairMarkedForDeletion: null,\n              indexSongDelete: payload,\n              listKeyPairMarkedForDeletion: null,\n              //songMarkedForEdit: 0,\n              //tempSong: { title: \"\", artist: \"\", youTubeId: \"\" },\n            });\n          }\n\n          case GlobalStoreActionType.ANNOTATE_SONG_FOR_EDIT: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: store.currentList,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listKeyPairMarkedForDeletion: null,\n              indexSongDelete: payload,\n              listKeyPairMarkedForDeletion: null,\n              //songMarkedForEdit: payload.index,\n              //tempSong: payload.song,\n            });\n          }\n\n          case GlobalStoreActionType.SONG_CHANGE: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: store.currentList,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listKeyPairMarkedForDeletion: null,\n              //songMarkedForEdit: store.songMarkedForEdit,\n              tempSong: payload,\n            });\n          }\n\n          default:\n            return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    store.markListForDeletion = function (id) {\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: id,\n      });\n\n      store.openDeleteListModal();\n    };\n\n    store.deleteList = function (id) {\n      async function deleteList(id) {\n        let response = await api.deletePlaylistById(id);\n        if (response.data.success) {\n          store.loadIdNamePairs();\n          const newIdNamePairs = store.idNamePairs.filter(\n            (idNamePair) => idNamePair !== id\n          );\n          storeReducer({\n            type: GlobalStoreActionType.DELETE_MARKED_LIST,\n            payload: newIdNamePairs,\n          });\n        }\n      }\n      deleteList(id);\n    };\n\n    store.deleteMarkedList = function () {\n      store.deleteList(store.listMarkedForDeletion);\n      store.closeDeleteListModal();\n    };\n\n    store.openDeleteListModal = function () {\n      let modal = document.getElementById(\"delete-list-modal\");\n      modal.classList.add(\"is-visible\");\n    };\n\n    store.closeDeleteListModal = function () {\n      let modal = document.getElementById(\"delete-list-modal\");\n      modal.classList.remove(\"is-visible\");\n    };\n\n\n    store.createNewList = function (){\n        async function asyncCreatePlaylist() {\n          let response = await api.createNewList();\n          if (response.data.success) {\n            let playlistId = response.data.playlist._id; \n            async function asyncSetCurrentList(id) {\n              let response = await api.getPlaylistById(id);\n              if (response.data.success) {\n                let playlist = response.data.playlist;\n                if (response.data.success) {\n                  storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: playlist,\n                  });\n                  store.history.push(\"/playlist/\" + playlist._id); \n                }\n              }\n            }\n            asyncSetCurrentList(playlistId);\n          } \n        }\n        asyncCreatePlaylist();\n    };\n/*\n     store.deleteSong = (index) => {\n       const list = store.currentList;\n       list.songs.splice(index, 1);\n       async function asyncUpdatePlaylist(playlist) {\n         let response = await api.updatePlaylistById(playlist._id, playlist);\n         if (response.data.success) {\n           console.log(response.data.playlist);\n           storeReducer({\n             type: GlobalStoreActionType.SET_CURRENT_LIST,\n             payload: response.data.playlist,\n           });\n         }\n       }\n\n       asyncUpdatePlaylist(list);\n     };\n/*\n     store.addSong = function () {\n       async function asyncAddNewSong() {\n         let newName = \"Untitled\";\n         let newArtist = \"Undefined\";\n         let newId = \"dQw4w9WgXcQ\";\n         let id = store.currentList._id;\n\n         let newSong = {title: newName,\n         artist: newArtist,\n         youTubeId: newId,\n         };\n\n         let response = await api.getPlaylistById(id);\n         if (response.data.success) {\n           let playlist = response.data.playlist;\n           let l = playlist.songs.length;\n           playlist.songs[l] = newSong;\n           async function updateList(playlist) {\n             response = await api.updatePlaylistById(id, playlist);\n             if (response.data.success) {\n               storeReducer({\n                 type: GlobalStoreActionType.ADD_NEW_SONG,\n                 payload: {\n                   playlist: playlist,\n                 },\n               });\n             }\n           }\n           updateList(playlist);\n         }\n       }\n       asyncAddNewSong();\n     };*/\n\n\n    //FUNCTION TO ADD SONG\n     store.addSong = () => {\n       let cl = store.currentList;\n       let addSong = {\n         title: \"untitled\",\n         artist: \"unknown\",\n         youTubeId: \"dQw4w9WgXcQ\",\n       };\n       cl.songs.push(addSong);\n       store.update_current_list(cl);\n     };\n\n\n     //This function is to update current list\n      store.update_current_list = async (list) => {\n         const r = await api.updatePlaylistById(list._id, list);\n         if (r.data.success) {\n             storeReducer({\n               type: GlobalStoreActionType.ADD_SONG_UPDATE_LIST,\n               payload: list,\n             });\n         }        \n     }\n\n    //FUNCTION FOR DRAG AND DROP SONG\n     store.dragAndDropSong = (first, last) => {\n       let playlist = store.currentList;\n\n        if (first > last) {\n          let arr = playlist.songs[first];\n          for (let i = first; i > last; i--) {\n            playlist.songs[i] = playlist.songs[i - 1];\n          }\n          playlist.songs[last] = arr;\n        }\n\n        else if (first < last) {\n         let arr = playlist.songs[first];\n         for (let i = first; i < last; i++) {\n           playlist.songs[i] = playlist.songs[i + 1];\n         }\n         playlist.songs[last] = arr;\n       } \n       \n       store.update_current_list(playlist);\n     };\n\n\n\n    //Functions for DELETE SONG\n\n    store.annotateSongDelete = (i) => {\n       storeReducer({\n         type: GlobalStoreActionType.ANNOTATE_SONG_FOR_DELETION,\n         payload: i,\n       });\n     };\n\n     store.deleteSong = (i) => {\n       let x = store.currentList;\n       if (x != null) {\n           x.songs.splice(i, 1);\n       }\n       store.update_current_list(x);\n       store.hideDeleteSongModal();\n     };\n\n     store.showDeleteSongModal = () => {\n       let modal = document.getElementById(\"delete-song-modal\");\n       modal.classList.add(\"is-visible\");\n     };\n\n     store.hideDeleteSongModal = () => {\n       let modal = document.getElementById(\"delete-song-modal\");\n       modal.classList.remove(\"is-visible\");\n     };\n\n\n/*\n     store.annotateSongEdit = (index,song) => {\n       storeReducer({\n         type: GlobalStoreActionType.ANNOTATE_SONG_FOR_EDIT,\n         payload: {\n           index: index,\n           song: song,\n         },\n       });\n       store.showEditSongModal();\n     };\n/*\n     store.editSong = (index,title,artist,youTubeId) => {\n         this.store.currentList.songs.splice(index, 1, {\n           title: title,\n           artist: artist,\n           youTubeId: youTubeId,\n         });\n\n         this.store.update_current_list(this.store.currentList);\n         this.hideEditSongModal();\n\n     }*/\n/*\n     store.editSong = (key, song) => {\n       let list = store.currentList;\n\n       if (list != null) {\n         let songToBeEdit = list.songs[key];\n\n         if (song.title === \"\") {\n           songToBeEdit.title = \"untitled\";\n         } else {\n           songToBeEdit.title = song.title;\n         }\n         if (song.artist === \"\") {\n           songToBeEdit.artist = \"unknown\";\n         } else {\n           songToBeEdit.artist = song.artist;\n         }\n         if (song.youTubeId === \"\") {\n           songToBeEdit.youTubeId = \"dQw4w9WgXcQ\";\n         } else {\n           songToBeEdit.youTubeId = song.youTubeId;\n         }\n       }\n\n       store.update_current_list(list);\n       store.hideEditSongModal();\n     };\n\n\n     store.handleSongChange = (e) => {\n       const tempSong = { ...store.tempSong };\n       tempSong[e.currentTarget.name] = e.currentTarget.value;\n       // this.setState({tempSong});\n       storeReducer({\n         type: GlobalStoreActionType.SONG_CHANGE,\n         payload: tempSong,\n       });\n     };\n\n     store.showEditSongModal = () => {\n       let modal = document.getElementById(\"edit-song-modal\");\n       modal.classList.add(\"is-visible\");\n     };\n\n     store.hideEditSongModal = () => {\n       let modal = document.getElementById(\"edit-song-modal\");\n       modal.classList.remove(\"is-visible\");\n     };\n     */\n\n     store.editSong = function (index, song) {\n       let t = song.title;\n       let a = song.artist;\n       let y = song.youTubeId;\n       store.showEditSongModal(t, a, y);\n       async function asyncSetCurrentSong() {\n         let response = await api.getPlaylistById(store.currentList._id);\n         if (response.data.success) {\n           let playlist = response.data.playlist;\n           if (response.data.success) {\n             storeReducer({\n               type: GlobalStoreActionType.MARK_SONG_FOR_EDITION,\n               payload: {\n                 markEditSongIndex: index,\n                 markListEdit: playlist,\n                 oldTitle: t,\n                 oldArtist: a,\n                 oldYouTubeId: y,\n               },\n             });\n           }\n         }\n       }\n       asyncSetCurrentSong();\n     };\n\n     store.edit = function (index) {\n       let newTitle = document.getElementById(\"tname\").value; //new value\n       let newArtist = document.getElementById(\"aname\").value; //new value\n       let newYouTubeId = document.getElementById(\"yname\").value; //new value\n       async function asyncEditSong(index) {\n         let response = await api.getPlaylistById(store.currentList._id);\n         if (response.data.success) {\n           let playlist = response.data.playlist;\n           playlist.songs[index].title = newTitle;\n           playlist.songs[index].artist = newArtist;\n           playlist.songs[index].youTubeId = newYouTubeId;\n           async function updateList(playlist) {\n             response = await api.updatePlaylistById(playlist._id, playlist);\n             if (response.data.success) {\n               let playlist = response.data.playlist;\n               storeReducer({\n                 type: GlobalStoreActionType.EDIT_SONG,\n                 payload: {\n                   playlist: playlist,\n                 },\n               });\n             }\n           }\n           updateList(playlist);\n         }\n       }\n       asyncEditSong(index);\n     };\n\n\n\n     store.showEditSongModal = function (t, a, y) {\n       let modal = document.getElementById(\"edit-song-modal\");\n       document.getElementById(\"tname\").value = t;\n       document.getElementById(\"aname\").value = a;\n       document.getElementById(\"yname\").value = y;\n       modal.classList.add(\"is-visible\");\n     };\n\n     store.hideEditSongModal = function () {\n       let modal = document.getElementById(\"edit-song-modal\");\n       modal.classList.remove(\"is-visible\");\n     };\n\n\n\n\n     store.addAddSongTransaction = () => {\n       let transaction = new AddSong_Transaction(store);\n       tps.addTransaction(transaction);\n     };\n\n     store.addMoveSongTransaction = (start, end) => {\n       let transaction = new MoveSong_Transaction(store, start, end);\n       tps.addTransaction(transaction);\n     };\n\n     store.addDeleteSongTransaction = (index, title, artist, id) => {\n       let transaction = new DeleteSong_Transaction(store, index, title, artist, id);\n       tps.addTransaction(transaction);\n     };\n\n     //store.addEditSongTransaction = (index) => {\n     //  let transaction = new EditSong_Transaction(store, index);\n    //   tps.addTransaction(transaction);\n     //};\n\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}