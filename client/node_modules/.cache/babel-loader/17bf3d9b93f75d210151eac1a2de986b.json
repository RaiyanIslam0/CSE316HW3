{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport AddSong_Transaction from \"../common/AddSong_Transaction\";\nimport MoveSong_Transaction from \"../common/MoveSong_Transaction\";\nimport DeleteSong_Transaction from \"../common/DeleteSong_Transaction\";\nimport EditSong_Transaction from \"../common/EditSong_Transaction\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  DELETE_MARKED_LIST: \"DELETE_MARKED_LIST\",\n  ADD_SONG_UPDATE_LIST: \"ADD_SONG_UPDATE_LIST\",\n  ANNOTATE_SONG_FOR_DELETION: \"ANNOTATE_SONG_FOR_DELETION\",\n  ANNOTATE_SONG_FOR_EDIT: \"ANNOTATE_SONG_FOR_EDIT\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listMarkedForDeletion: null,\n    songMarkedForDeletion: null,\n    indexSongDelete: 0,\n    listKeyPairMarkedForDeletion: null,\n    listKeyPairMarkedForDeletion: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            songMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: null\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: payload,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: payload\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            songMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            songIndexMarkedForEdit: false,\n            editListNameActive: true,\n            songMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: null\n          });\n        }\n      case GlobalStoreActionType.DELETE_MARKED_LIST:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            listKeyPairMarkedForDeletion: null\n          });\n        }\n      case GlobalStoreActionType.ADD_NEW_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            listKeyPairMarkedForDeletion: null\n          });\n        }\n      case GlobalStoreActionType.MARK_SONG_FOR_EDIT:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            songIndexMarkedForEdit: payload,\n            editListNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            listKeyPairMarkedForDeletion: null\n          });\n        }\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            songIndexMarkedForEdit: null,\n            editListNameActive: false,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            listKeyPairMarkedForDeletion: null\n          });\n        }\n      case GlobalStoreActionType.ADD_SONG_UPDATE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            listKeyPairMarkedForDeletion: null\n          });\n        }\n      case GlobalStoreActionType.ANNOTATE_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listKeyPairMarkedForDeletion: null,\n            indexSongDelete: payload,\n            listKeyPairMarkedForDeletion: null\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.markListForDeletion = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    store.openDeleteListModal();\n  };\n  store.deleteList = function (id) {\n    async function deleteList(id) {\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        const newIdNamePairs = store.idNamePairs.filter(idNamePair => idNamePair !== id);\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_MARKED_LIST,\n          payload: newIdNamePairs\n        });\n      }\n    }\n    deleteList(id);\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n    store.closeDeleteListModal();\n  };\n  store.openDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.closeDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.createNewList = function () {\n    async function asyncCreatePlaylist() {\n      let response = await api.createNewList();\n      if (response.data.success) {\n        let playlistId = response.data.playlist._id;\n        async function asyncSetCurrentList(id) {\n          let response = await api.getPlaylistById(id);\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist\n              });\n              store.history.push(\"/playlist/\" + playlist._id);\n            }\n          }\n        }\n        asyncSetCurrentList(playlistId);\n      }\n    }\n    asyncCreatePlaylist();\n  };\n  /*\n       store.deleteSong = (index) => {\n         const list = store.currentList;\n         list.songs.splice(index, 1);\n         async function asyncUpdatePlaylist(playlist) {\n           let response = await api.updatePlaylistById(playlist._id, playlist);\n           if (response.data.success) {\n             console.log(response.data.playlist);\n             storeReducer({\n               type: GlobalStoreActionType.SET_CURRENT_LIST,\n               payload: response.data.playlist,\n             });\n           }\n         }\n  \n         asyncUpdatePlaylist(list);\n       };\n  /*\n       store.addSong = function () {\n         async function asyncAddNewSong() {\n           let newName = \"Untitled\";\n           let newArtist = \"Undefined\";\n           let newId = \"dQw4w9WgXcQ\";\n           let id = store.currentList._id;\n  \n           let newSong = {title: newName,\n           artist: newArtist,\n           youTubeId: newId,\n           };\n  \n           let response = await api.getPlaylistById(id);\n           if (response.data.success) {\n             let playlist = response.data.playlist;\n             let l = playlist.songs.length;\n             playlist.songs[l] = newSong;\n             async function updateList(playlist) {\n               response = await api.updatePlaylistById(id, playlist);\n               if (response.data.success) {\n                 storeReducer({\n                   type: GlobalStoreActionType.ADD_NEW_SONG,\n                   payload: {\n                     playlist: playlist,\n                   },\n                 });\n               }\n             }\n             updateList(playlist);\n           }\n         }\n         asyncAddNewSong();\n       };*/\n\n  //FUNCTION TO ADD SONG\n  store.addSong = () => {\n    let cl = store.currentList;\n    let addSong = {\n      title: \"untitled\",\n      artist: \"unknown\",\n      youTubeId: \"dQw4w9WgXcQ\"\n    };\n    cl.songs.push(addSong);\n    store.update_current_list(cl);\n  };\n\n  //This function is to update current list\n  store.update_current_list = async list => {\n    const r = await api.updatePlaylistById(list._id, list);\n    if (r.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.ADD_SONG_UPDATE_LIST,\n        payload: list\n      });\n    }\n  };\n\n  //FUNCTION FOR DRAG AND DROP SONG\n  store.dragAndDropSong = (first, last) => {\n    let playlist = store.currentList;\n    if (first > last) {\n      let arr = playlist.songs[first];\n      for (let i = first; i > last; i--) {\n        playlist.songs[i] = playlist.songs[i - 1];\n      }\n      playlist.songs[last] = arr;\n    } else if (first < last) {\n      let arr = playlist.songs[first];\n      for (let i = first; i < last; i++) {\n        playlist.songs[i] = playlist.songs[i + 1];\n      }\n      playlist.songs[last] = arr;\n    }\n    store.update_current_list(playlist);\n  };\n\n  //Functions for DELETE SONG\n\n  store.annotateSongDelete = i => {\n    storeReducer({\n      type: GlobalStoreActionType.ANNOTATE_SONG_FOR_DELETION,\n      payload: i\n    });\n  };\n  store.deleteSong = i => {\n    let x = store.currentList;\n    if (x != null) {\n      x.songs.splice(i, 1);\n    }\n    store.update_current_list(x);\n    store.hideDeleteSongModal();\n  };\n  store.showDeleteSongModal = () => {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteSongModal = () => {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.annotateSongEdit = (index, song) => {\n    storeReducer({\n      type: GlobalStoreActionType.ANNOTATE_SONG_FOR_EDIT,\n      payload: {\n        index: index,\n        song: song\n      }\n    });\n  };\n  store.editSong = (index, title, artist, youTubeId) => {\n    this.store.currentList.songs.splice(index, 1, {\n      title: title,\n      artist: artist,\n      youTubeId: youTubeId\n    });\n    this.store.update_current_list(this.store.currentList);\n    this.hideEditSongModal();\n  };\n  store.showEditSongModal = () => {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideEditSongModal = () => {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.addAddSongTransaction = () => {\n    let transaction = new AddSong_Transaction(store);\n    tps.addTransaction(transaction);\n  };\n  store.addMoveSongTransaction = (start, end) => {\n    let transaction = new MoveSong_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n  store.addDeleteSongTransaction = (index, title, artist, id) => {\n    let transaction = new DeleteSong_Transaction(store, index, title, artist, id);\n    tps.addTransaction(transaction);\n  };\n\n  //store.addEditSongTransaction = (index) => {\n  //  let transaction = new EditSong_Transaction(store, index);\n  //   tps.addTransaction(transaction);\n  //};\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"+5jSEO+mDNJNJHkzruf17ztOo3Y=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","AddSong_Transaction","MoveSong_Transaction","DeleteSong_Transaction","EditSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","DELETE_MARKED_LIST","ADD_SONG_UPDATE_LIST","ANNOTATE_SONG_FOR_DELETION","ANNOTATE_SONG_FOR_EDIT","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listMarkedForDeletion","songMarkedForDeletion","indexSongDelete","listKeyPairMarkedForDeletion","storeReducer","action","type","payload","playlist","songIndexMarkedForEdit","editListNameActive","ADD_NEW_SONG","MARK_SONG_FOR_EDIT","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","setlistNameActive","markListForDeletion","openDeleteListModal","deleteList","deletePlaylistById","newIdNamePairs","filter","idNamePair","deleteMarkedList","closeDeleteListModal","modal","document","getElementById","classList","add","remove","createNewList","asyncCreatePlaylist","playlistId","addSong","cl","title","artist","youTubeId","update_current_list","list","r","dragAndDropSong","first","last","arr","i","annotateSongDelete","deleteSong","x","splice","hideDeleteSongModal","showDeleteSongModal","annotateSongEdit","index","song","editSong","hideEditSongModal","showEditSongModal","addAddSongTransaction","transaction","addTransaction","addMoveSongTransaction","start","end","addDeleteSongTransaction"],"sources":["/Users/raiyan0islam/CSE316HW3Mongo/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport AddSong_Transaction from \"../common/AddSong_Transaction\";\nimport MoveSong_Transaction from \"../common/MoveSong_Transaction\";\nimport DeleteSong_Transaction from \"../common/DeleteSong_Transaction\";\nimport EditSong_Transaction from \"../common/EditSong_Transaction\";\nexport const GlobalStoreContext = createContext({});\n\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  DELETE_MARKED_LIST: \"DELETE_MARKED_LIST\",\n  ADD_SONG_UPDATE_LIST: \"ADD_SONG_UPDATE_LIST\",\n  ANNOTATE_SONG_FOR_DELETION: \"ANNOTATE_SONG_FOR_DELETION\",\n  ANNOTATE_SONG_FOR_EDIT: \"ANNOTATE_SONG_FOR_EDIT\",\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n      idNamePairs: [],\n      currentList: null,\n      newListCounter: 0,\n      listNameActive: false,\n\n      listMarkedForDeletion: null,\n      songMarkedForDeletion: null,\n      indexSongDelete: 0,\n      listKeyPairMarkedForDeletion: null,\n      listKeyPairMarkedForDeletion: null,\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n          // LIST UPDATE OF ITS NAME\n          case GlobalStoreActionType.CHANGE_LIST_NAME: {\n            return setStore({\n              idNamePairs: payload.idNamePairs,\n              currentList: payload.playlist,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: null,\n            });\n          }\n          // STOP EDITING THE CURRENT LIST\n          case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: null,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              songMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: null,\n            });\n          }\n          // CREATE A NEW LIST\n          case GlobalStoreActionType.CREATE_NEW_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload,\n              newListCounter: store.newListCounter + 1,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: null,\n            });\n          }\n          // GET ALL THE LISTS SO WE CAN PRESENT THEM\n          case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n            return setStore({\n              idNamePairs: payload,\n              currentList: null,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: null,\n            });\n          }\n          // PREPARE TO DELETE A LIST\n          case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: null,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: payload,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: payload,\n            });\n          }\n          // UPDATE A LIST\n          case GlobalStoreActionType.SET_CURRENT_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              songMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: null,\n            });\n          }\n          // START EDITING A LIST NAME\n          case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload,\n              newListCounter: store.newListCounter,\n              listNameActive: true,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              songIndexMarkedForEdit: false,\n              editListNameActive: true,\n              songMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: null,\n            });\n          }\n\n          case GlobalStoreActionType.DELETE_MARKED_LIST: {\n            return setStore({\n              idNamePairs: payload,\n              currentList: null,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: null,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              listKeyPairMarkedForDeletion: null,\n            });\n          }\n\n          case GlobalStoreActionType.ADD_NEW_SONG: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload.playlist,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: null,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              listKeyPairMarkedForDeletion: null,\n            });\n          }\n\n          case GlobalStoreActionType.MARK_SONG_FOR_EDIT: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: store.currentList,\n              newListCounter: store.newListCounter,\n              songIndexMarkedForEdit: payload,\n              editListNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              listKeyPairMarkedForDeletion: null,\n            });\n          }\n          case GlobalStoreActionType.SET_CURRENT_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload,\n              newListCounter: store.newListCounter,\n              songIndexMarkedForEdit: null,\n              editListNameActive: false,\n              listMarkedForDeletion: store.listMarkedForDeletion,\n              listKeyPairMarkedForDeletion: null,\n            });\n          }\n\n          case GlobalStoreActionType.ADD_SONG_UPDATE_LIST: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: payload,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listMarkedForDeletion: null,\n              listKeyPairMarkedForDeletion: null,\n            });\n          }\n\n          case GlobalStoreActionType.ANNOTATE_SONG_FOR_DELETION: {\n            return setStore({\n              idNamePairs: store.idNamePairs,\n              currentList: store.currentList,\n              newListCounter: store.newListCounter,\n              listNameActive: false,\n              listKeyPairMarkedForDeletion: null,\n              indexSongDelete: payload,\n              listKeyPairMarkedForDeletion: null,\n            });\n          }\n\n          default:\n            return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    store.markListForDeletion = function (id) {\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: id,\n      });\n\n      store.openDeleteListModal();\n    };\n\n    store.deleteList = function (id) {\n      async function deleteList(id) {\n        let response = await api.deletePlaylistById(id);\n        if (response.data.success) {\n          store.loadIdNamePairs();\n          const newIdNamePairs = store.idNamePairs.filter(\n            (idNamePair) => idNamePair !== id\n          );\n          storeReducer({\n            type: GlobalStoreActionType.DELETE_MARKED_LIST,\n            payload: newIdNamePairs,\n          });\n        }\n      }\n      deleteList(id);\n    };\n\n    store.deleteMarkedList = function () {\n      store.deleteList(store.listMarkedForDeletion);\n      store.closeDeleteListModal();\n    };\n\n    store.openDeleteListModal = function () {\n      let modal = document.getElementById(\"delete-list-modal\");\n      modal.classList.add(\"is-visible\");\n    };\n\n    store.closeDeleteListModal = function () {\n      let modal = document.getElementById(\"delete-list-modal\");\n      modal.classList.remove(\"is-visible\");\n    };\n\n\n    store.createNewList = function (){\n        async function asyncCreatePlaylist() {\n          let response = await api.createNewList();\n          if (response.data.success) {\n            let playlistId = response.data.playlist._id; \n            async function asyncSetCurrentList(id) {\n              let response = await api.getPlaylistById(id);\n              if (response.data.success) {\n                let playlist = response.data.playlist;\n                if (response.data.success) {\n                  storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: playlist,\n                  });\n                  store.history.push(\"/playlist/\" + playlist._id); \n                }\n              }\n            }\n            asyncSetCurrentList(playlistId);\n          } \n        }\n        asyncCreatePlaylist();\n    };\n/*\n     store.deleteSong = (index) => {\n       const list = store.currentList;\n       list.songs.splice(index, 1);\n       async function asyncUpdatePlaylist(playlist) {\n         let response = await api.updatePlaylistById(playlist._id, playlist);\n         if (response.data.success) {\n           console.log(response.data.playlist);\n           storeReducer({\n             type: GlobalStoreActionType.SET_CURRENT_LIST,\n             payload: response.data.playlist,\n           });\n         }\n       }\n\n       asyncUpdatePlaylist(list);\n     };\n/*\n     store.addSong = function () {\n       async function asyncAddNewSong() {\n         let newName = \"Untitled\";\n         let newArtist = \"Undefined\";\n         let newId = \"dQw4w9WgXcQ\";\n         let id = store.currentList._id;\n\n         let newSong = {title: newName,\n         artist: newArtist,\n         youTubeId: newId,\n         };\n\n         let response = await api.getPlaylistById(id);\n         if (response.data.success) {\n           let playlist = response.data.playlist;\n           let l = playlist.songs.length;\n           playlist.songs[l] = newSong;\n           async function updateList(playlist) {\n             response = await api.updatePlaylistById(id, playlist);\n             if (response.data.success) {\n               storeReducer({\n                 type: GlobalStoreActionType.ADD_NEW_SONG,\n                 payload: {\n                   playlist: playlist,\n                 },\n               });\n             }\n           }\n           updateList(playlist);\n         }\n       }\n       asyncAddNewSong();\n     };*/\n\n\n    //FUNCTION TO ADD SONG\n     store.addSong = () => {\n       let cl = store.currentList;\n       let addSong = {\n         title: \"untitled\",\n         artist: \"unknown\",\n         youTubeId: \"dQw4w9WgXcQ\",\n       };\n       cl.songs.push(addSong);\n       store.update_current_list(cl);\n     };\n\n\n     //This function is to update current list\n      store.update_current_list = async (list) => {\n         const r = await api.updatePlaylistById(list._id, list);\n         if (r.data.success) {\n             storeReducer({\n               type: GlobalStoreActionType.ADD_SONG_UPDATE_LIST,\n               payload: list,\n             });\n         }        \n     }\n\n    //FUNCTION FOR DRAG AND DROP SONG\n     store.dragAndDropSong = (first, last) => {\n       let playlist = store.currentList;\n\n        if (first > last) {\n          let arr = playlist.songs[first];\n          for (let i = first; i > last; i--) {\n            playlist.songs[i] = playlist.songs[i - 1];\n          }\n          playlist.songs[last] = arr;\n        }\n\n        else if (first < last) {\n         let arr = playlist.songs[first];\n         for (let i = first; i < last; i++) {\n           playlist.songs[i] = playlist.songs[i + 1];\n         }\n         playlist.songs[last] = arr;\n       } \n       \n       store.update_current_list(playlist);\n     };\n\n\n\n    //Functions for DELETE SONG\n\n    store.annotateSongDelete = (i) => {\n       storeReducer({\n         type: GlobalStoreActionType.ANNOTATE_SONG_FOR_DELETION,\n         payload: i,\n       });\n     };\n\n     store.deleteSong = (i) => {\n       let x = store.currentList;\n       if (x != null) {\n           x.songs.splice(i, 1);\n       }\n       store.update_current_list(x);\n       store.hideDeleteSongModal();\n     };\n\n     store.showDeleteSongModal = () => {\n       let modal = document.getElementById(\"delete-song-modal\");\n       modal.classList.add(\"is-visible\");\n     };\n\n     store.hideDeleteSongModal = () => {\n       let modal = document.getElementById(\"delete-song-modal\");\n       modal.classList.remove(\"is-visible\");\n     };\n\n\n\n     store.annotateSongEdit = (index,song) => {\n       storeReducer({\n         type: GlobalStoreActionType.ANNOTATE_SONG_FOR_EDIT,\n         payload:{\n             index: index,\n             song: song\n         } \n       });\n     };\n\n     store.editSong = (index,title,artist,youTubeId) => {\n         this.store.currentList.songs.splice(index, 1, {\n           title: title,\n           artist: artist,\n           youTubeId: youTubeId,\n         });\n\n         this.store.update_current_list(this.store.currentList);\n         this.hideEditSongModal();\n\n     }\n\n     store.showEditSongModal = () => {\n       let modal = document.getElementById(\"edit-song-modal\");\n       modal.classList.add(\"is-visible\");\n     };\n\n     store.hideEditSongModal = () => {\n       let modal = document.getElementById(\"edit-song-modal\");\n       modal.classList.remove(\"is-visible\");\n     };\n\n\n\n\n     store.addAddSongTransaction = () => {\n       let transaction = new AddSong_Transaction(store);\n       tps.addTransaction(transaction);\n     };\n\n     store.addMoveSongTransaction = (start, end) => {\n       let transaction = new MoveSong_Transaction(store, start, end);\n       tps.addTransaction(transaction);\n     };\n\n     store.addDeleteSongTransaction = (index, title, artist, id) => {\n       let transaction = new DeleteSong_Transaction(store, index, title, artist, id);\n       tps.addTransaction(transaction);\n     };\n\n     //store.addEditSongTransaction = (index) => {\n     //  let transaction = new EditSong_Transaction(store, index);\n    //   tps.addTransaction(transaction);\n     //};\n\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}