{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n  DELETE_MARKED_LIST: \"DELETE_MARKED_LIST\",\n  MARK_SONG_FOR_EDIT: \"MARK_SONG_FOR_EDIT\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listMarkedForDeletion: null,\n    songMarkedForDeletion: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            songMarkedForDeletion: null,\n            songMarkedForEdit: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          console.log(store.newListCounter);\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            songMarkedForDeletion: null,\n            songMarkedForEdit: null\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          console.log(store.newListCounter);\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            songMarkedForDeletion: null,\n            songMarkedForEdit: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            songMarkedForDeletion: null,\n            songMarkedForEdit: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: payload,\n            songMarkedForDeletion: null,\n            songMarkedForEdit: null\n          });\n        }\n      // PREPARE TO DELETE A SONG\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            songMarkedForDeletion: payload,\n            songMarkedForEdit: null\n          });\n        }\n      // PREPARE TO EDIT A SONG\n      case GlobalStoreActionType.MARK_SONG_FOR_EDIT:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            songMarkedForDeletion: null,\n            songMarkedForEdit: payload\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            songMarkedForDeletion: null,\n            songMarkedForEdit: null\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listMarkedForDeletion: null,\n            songMarkedForDeletion: null,\n            songMarkedForEdit: null\n          });\n        }\n      default:\n        return store;\n    }\n  };\n\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.markListForDeletion = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    console.log(\"list marked for deletion\" + id);\n    store.openDeleteListModal();\n  };\n  store.deleteList = function (id) {\n    async function deleteList(id) {\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        const newIdNamePairs = store.idNamePairs.filter(idNamePair => idNamePair !== id);\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_MARKED_LIST,\n          payload: newIdNamePairs\n        });\n      }\n    }\n    deleteList(id);\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n    store.closeDeleteListModal();\n  };\n  store.openDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.closeDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.createNewList = function () {\n    async function asyncCreatePlaylist() {\n      let response = await api.createNewList();\n      if (response.data.success) {\n        let playlistId = response.data.playlist._id;\n        async function asyncSetCurrentList(id) {\n          let response = await api.getPlaylistById(id);\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist\n              });\n              store.history.push(\"/playlist/\" + playlist._id);\n            }\n          }\n        }\n        asyncSetCurrentList(playlistId);\n      }\n    }\n    asyncCreatePlaylist();\n  };\n  store.deleteSong = idx => {\n    const list = store.currentList;\n    list.songs.splice(idx, 1);\n    async function asyncUpdatePlaylist(playlist) {\n      let response = await api.updatePlaylistById(playlist._id, playlist);\n      if (response.data.success) {\n        console.log(response.data.playlist);\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: response.data.playlist\n        });\n      }\n    }\n    asyncUpdatePlaylist(list);\n  };\n  /*\n       store.addSong = function () {\n         async function asyncAddNewSong() {\n           let newName = \"Untitled\";\n           let newArtist = \"Undefined\";\n           let newId = \"dQw4w9WgXcQ\";\n           let id = store.currentList._id;\n  \n           let newSong = {title: newName,\n           artist: newArtist,\n           youTubeId: newId,\n           };\n  \n           let response = await api.getPlaylistById(id);\n           if (response.data.success) {\n             let playlist = response.data.playlist;\n             let l = playlist.songs.length;\n             playlist.songs[l] = newSong;\n             async function updateList(playlist) {\n               response = await api.updatePlaylistById(id, playlist);\n               if (response.data.success) {\n                 storeReducer({\n                   type: GlobalStoreActionType.ADD_NEW_SONG,\n                   payload: {\n                     playlist: playlist,\n                   },\n                 });\n               }\n             }\n             updateList(playlist);\n           }\n         }\n         asyncAddNewSong();\n       };*/\n\n  store.addSong = function (initLocation) {\n    let song = {\n      title: \"Untitled\",\n      artist: \"Unknown\",\n      youTubeId: \"dQw4w9WgXcQ\"\n    };\n    let playlist = store.currentList;\n    const name = playlist.name;\n    const id = playlist._id;\n    let newSongs = [];\n    for (let i = 0; i < initLocation; i++) {\n      newSongs.push(playlist.songs[i]);\n    }\n    newSongs.push(song);\n    for (let i = initLocation; i < playlist.songs.length; i++) {\n      newSongs.push(playlist.songs[i]);\n    }\n    store.updateCurrentList(id, {\n      name,\n      songs: newSongs\n    });\n  };\n\n  //This function is to update current list\n  store.updateCurrentList = function (id, playlist) {\n    (async () => {\n      try {\n        let res = await api.updatePlaylistById(id, playlist);\n        if (res.data.success) {\n          res = await api.getPlaylistById(id);\n          if (res.data.success) {\n            const playlist = res.data.playlist;\n            storeReducer({\n              type: GlobalStoreActionType.SET_CURRENT_LIST,\n              payload: playlist\n            });\n          }\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  };\n  store.moveSong = function (start, end) {\n    let list = store.currentList;\n    if (start < end) {\n      let temp = list.songs[start];\n      for (let i = start; i < end; i++) {\n        list.songs[i] = list.songs[i + 1];\n      }\n      list.songs[end] = temp;\n    } else if (start > end) {\n      let temp = list.songs[start];\n      for (let i = start; i > end; i--) {\n        list.songs[i] = list.songs[i - 1];\n      }\n      list.songs[end] = temp;\n    }\n    async function updateList(list) {\n      let response = await api.updatePlaylistById(list._id, list);\n      list = response.data.playlist;\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.DRAG_LIST,\n          payload: {\n            playlist: list\n          }\n        });\n      }\n    }\n    updateList(list);\n  };\n  store.markSongForDeletion = function (songId) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n      payload: songId\n    });\n    store.showDeleteSongModal();\n  };\n  store.deleteMarkedSong = function () {\n    store.deleteSong(store.songMarkedForDeletion);\n    store.hideDeleteSongModal();\n  };\n  store.showDeleteSongModal = function () {\n    let modal = document.getElementById(\"remove-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"remove-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.deleteSong = function (songId) {\n    let playlist = store.currentList;\n    const name = playlist.name;\n    const id = playlist._id;\n    let newSongs = [];\n    for (let k = 0; k < songId; k++) {\n      newSongs.push(playlist.songs[k]);\n    }\n    for (let k = songId + 1; k < playlist.songs.length; k++) {\n      newSongs.push(playlist.songs[k]);\n    }\n    store.updateCurrentList(id, {\n      name,\n      songs: newSongs\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"OWN0wuLKS9cNp31WCc2EJuPy8uw=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","MARK_SONG_FOR_DELETION","DELETE_MARKED_LIST","MARK_SONG_FOR_EDIT","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listMarkedForDeletion","songMarkedForDeletion","storeReducer","action","type","payload","playlist","songMarkedForEdit","console","log","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","setlistNameActive","markListForDeletion","openDeleteListModal","deleteList","deletePlaylistById","newIdNamePairs","filter","idNamePair","deleteMarkedList","closeDeleteListModal","modal","document","getElementById","classList","add","remove","createNewList","asyncCreatePlaylist","playlistId","deleteSong","idx","list","splice","asyncUpdatePlaylist","addSong","initLocation","song","title","artist","youTubeId","newSongs","i","updateCurrentList","res","e","error","moveSong","start","end","temp","DRAG_LIST","markSongForDeletion","songId","showDeleteSongModal","deleteMarkedSong","hideDeleteSongModal","k"],"sources":["/Users/raiyan0islam/CSE316HW3Mongo/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n  DELETE_MARKED_LIST: \"DELETE_MARKED_LIST\",\n  MARK_SONG_FOR_EDIT: \"MARK_SONG_FOR_EDIT\",\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n      idNamePairs: [],\n      currentList: null,\n      newListCounter: 0,\n      listNameActive: false,\n      listMarkedForDeletion: null,\n      songMarkedForDeletion: null,\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    songMarkedForDeletion: null,\n                    songMarkedForEdit: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                console.log(store.newListCounter);\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    songMarkedForDeletion: null,\n                    songMarkedForEdit: null\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                console.log(store.newListCounter);\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    songMarkedForDeletion: null,\n                    songMarkedForEdit: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    songMarkedForDeletion: null,\n                    songMarkedForEdit: null\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: payload,\n                    songMarkedForDeletion: null,\n                    songMarkedForEdit: null\n                });\n            }\n            // PREPARE TO DELETE A SONG\n            case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    songMarkedForDeletion: payload,\n                    songMarkedForEdit: null\n                });\n            }\n            // PREPARE TO EDIT A SONG\n            case GlobalStoreActionType.MARK_SONG_FOR_EDIT: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    songMarkedForDeletion: null,\n                    songMarkedForEdit: payload\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    songMarkedForDeletion: null,\n                    songMarkedForEdit: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    listMarkedForDeletion: null,\n                    songMarkedForDeletion: null,\n                    songMarkedForEdit: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n     \n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    store.markListForDeletion = function (id) {\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: id,\n      });\n      console.log(\"list marked for deletion\" + id);\n      store.openDeleteListModal();\n    };\n\n    store.deleteList = function (id) {\n      async function deleteList(id) {\n        let response = await api.deletePlaylistById(id);\n        if (response.data.success) {\n          store.loadIdNamePairs();\n          const newIdNamePairs = store.idNamePairs.filter(\n            (idNamePair) => idNamePair !== id\n          );\n          storeReducer({\n            type: GlobalStoreActionType.DELETE_MARKED_LIST,\n            payload: newIdNamePairs,\n          });\n        }\n      }\n      deleteList(id);\n    };\n\n    store.deleteMarkedList = function () {\n      store.deleteList(store.listMarkedForDeletion);\n      store.closeDeleteListModal();\n    };\n\n    store.openDeleteListModal = function () {\n      let modal = document.getElementById(\"delete-list-modal\");\n      modal.classList.add(\"is-visible\");\n    };\n\n    store.closeDeleteListModal = function () {\n      let modal = document.getElementById(\"delete-list-modal\");\n      modal.classList.remove(\"is-visible\");\n    };\n\n\n    store.createNewList = function (){\n        async function asyncCreatePlaylist() {\n          let response = await api.createNewList();\n          if (response.data.success) {\n            let playlistId = response.data.playlist._id; \n            async function asyncSetCurrentList(id) {\n              let response = await api.getPlaylistById(id);\n              if (response.data.success) {\n                let playlist = response.data.playlist;\n                if (response.data.success) {\n                  storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: playlist,\n                  });\n                  store.history.push(\"/playlist/\" + playlist._id); \n                }\n              }\n            }\n            asyncSetCurrentList(playlistId);\n          } \n        }\n        asyncCreatePlaylist();\n    };\n\n     store.deleteSong = (idx) => {\n       const list = store.currentList;\n       list.songs.splice(idx, 1);\n       async function asyncUpdatePlaylist(playlist) {\n         let response = await api.updatePlaylistById(playlist._id, playlist);\n         if (response.data.success) {\n           console.log(response.data.playlist);\n           storeReducer({\n             type: GlobalStoreActionType.SET_CURRENT_LIST,\n             payload: response.data.playlist,\n           });\n         }\n       }\n\n       asyncUpdatePlaylist(list);\n     };\n/*\n     store.addSong = function () {\n       async function asyncAddNewSong() {\n         let newName = \"Untitled\";\n         let newArtist = \"Undefined\";\n         let newId = \"dQw4w9WgXcQ\";\n         let id = store.currentList._id;\n\n         let newSong = {title: newName,\n         artist: newArtist,\n         youTubeId: newId,\n         };\n\n         let response = await api.getPlaylistById(id);\n         if (response.data.success) {\n           let playlist = response.data.playlist;\n           let l = playlist.songs.length;\n           playlist.songs[l] = newSong;\n           async function updateList(playlist) {\n             response = await api.updatePlaylistById(id, playlist);\n             if (response.data.success) {\n               storeReducer({\n                 type: GlobalStoreActionType.ADD_NEW_SONG,\n                 payload: {\n                   playlist: playlist,\n                 },\n               });\n             }\n           }\n           updateList(playlist);\n         }\n       }\n       asyncAddNewSong();\n     };*/\n\n     store.addSong = function (initLocation) {\n       let song = {\n         title: \"Untitled\",\n         artist: \"Unknown\",\n         youTubeId: \"dQw4w9WgXcQ\",\n       };\n       let playlist = store.currentList;\n       const name = playlist.name;\n       const id = playlist._id;\n       let newSongs = [];\n       for (let i = 0; i < initLocation; i++) {\n         newSongs.push(playlist.songs[i]);\n       }\n       newSongs.push(song);\n       for (let i = initLocation; i < playlist.songs.length; i++) {\n         newSongs.push(playlist.songs[i]);\n       }\n       store.updateCurrentList(id, {\n         name,\n         songs: newSongs,\n       });\n     };\n\n     //This function is to update current list\n     store.updateCurrentList = function (id, playlist) {\n       (async () => {\n         try {\n           let res = await api.updatePlaylistById(id, playlist);\n           if (res.data.success) {\n             res = await api.getPlaylistById(id);\n             if (res.data.success) {\n               const playlist = res.data.playlist;\n               storeReducer({\n                 type: GlobalStoreActionType.SET_CURRENT_LIST,\n                 payload: playlist,\n               });\n             }\n           }\n         } catch (e) {\n           console.error(e);\n         }\n       })();\n     };\n\n     store.moveSong = function (start, end) {\n       let list = store.currentList;\n       if (start < end) {\n         let temp = list.songs[start];\n         for (let i = start; i < end; i++) {\n           list.songs[i] = list.songs[i + 1];\n         }\n         list.songs[end] = temp;\n       } else if (start > end) {\n         let temp = list.songs[start];\n         for (let i = start; i > end; i--) {\n           list.songs[i] = list.songs[i - 1];\n         }\n         list.songs[end] = temp;\n       }\n       async function updateList(list) {\n         let response = await api.updatePlaylistById(list._id, list);\n         list = response.data.playlist;\n         if (response.data.success) {\n           storeReducer({\n             type: GlobalStoreActionType.DRAG_LIST,\n             payload: {\n               playlist: list,\n             },\n           });\n         }\n       }\n       updateList(list);\n     };\n\n\n     store.markSongForDeletion = function (songId) {\n       storeReducer({\n         type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n         payload: songId,\n       });\n       store.showDeleteSongModal();\n     };\n     store.deleteMarkedSong = function () {\n       store.deleteSong(store.songMarkedForDeletion);\n       store.hideDeleteSongModal();\n     };\n     store.showDeleteSongModal = function () {\n       let modal = document.getElementById(\"remove-song-modal\");\n       modal.classList.add(\"is-visible\");\n     };\n     store.hideDeleteSongModal = function () {\n       let modal = document.getElementById(\"remove-song-modal\");\n       modal.classList.remove(\"is-visible\");\n     };\n     store.deleteSong = function (songId) {\n       let playlist = store.currentList;\n       const name = playlist.name;\n       const id = playlist._id;\n       let newSongs = [];\n       for (let k = 0; k < songId; k++) {\n         newSongs.push(playlist.songs[k]);\n       }\n       for (let k = songId + 1; k < playlist.songs.length; k++) {\n         newSongs.push(playlist.songs[k]);\n       }\n       store.updateCurrentList(id, {\n         name,\n         songs: newSongs,\n       });\n     };\n\n\n\n\n \n\n\n\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}